{"version":3,"file":"index.js","sources":["../webpack://typescript-action/./lib/main.js","../webpack://typescript-action/./lib/requests.js","../webpack://typescript-action/./lib/tool.js","../webpack://typescript-action/./node_modules/@actions/core/lib/command.js","../webpack://typescript-action/./node_modules/@actions/core/lib/core.js","../webpack://typescript-action/./node_modules/@actions/core/lib/file-command.js","../webpack://typescript-action/./node_modules/@actions/core/lib/oidc-utils.js","../webpack://typescript-action/./node_modules/@actions/core/lib/utils.js","../webpack://typescript-action/./node_modules/@actions/http-client/auth.js","../webpack://typescript-action/./node_modules/@actions/http-client/index.js","../webpack://typescript-action/./node_modules/@actions/http-client/proxy.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/async_search.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/autoscaling.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/bulk.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/cat.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/ccr.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/clear_scroll.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/close_point_in_time.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/cluster.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/count.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/create.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/dangling_indices.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/delete.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/delete_by_query.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/delete_by_query_rethrottle.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/delete_script.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/enrich.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/eql.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/exists.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/exists_source.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/explain.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/features.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/field_caps.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/fleet.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/get.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/get_script.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/get_script_context.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/get_script_languages.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/get_source.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/graph.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/ilm.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/index.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/indices.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/info.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/ingest.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/license.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/logstash.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/mget.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/migration.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/ml.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/monitoring.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/msearch.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/msearch_template.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/mtermvectors.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/nodes.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/open_point_in_time.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/ping.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/put_script.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/rank_eval.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/reindex.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/reindex_rethrottle.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/render_search_template.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/rollup.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/scripts_painless_execute.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/scroll.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/search.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/search_mvt.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/search_shards.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/search_template.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/searchable_snapshots.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/security.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/shutdown.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/slm.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/snapshot.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/sql.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/ssl.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/tasks.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/terms_enum.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/termvectors.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/text_structure.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/transform.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/update.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/update_by_query.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/update_by_query_rethrottle.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/watcher.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/api/xpack.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/index.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/api/utils.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/index.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/Connection.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/Helpers.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/Serializer.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/Transport.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/errors.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/pool/BaseConnectionPool.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/pool/CloudConnectionPool.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/pool/ConnectionPool.js","../webpack://typescript-action/./node_modules/@elastic/elasticsearch/lib/pool/index.js","../webpack://typescript-action/./node_modules/axios/index.js","../webpack://typescript-action/./node_modules/axios/lib/adapters/http.js","../webpack://typescript-action/./node_modules/axios/lib/adapters/xhr.js","../webpack://typescript-action/./node_modules/axios/lib/axios.js","../webpack://typescript-action/./node_modules/axios/lib/cancel/Cancel.js","../webpack://typescript-action/./node_modules/axios/lib/cancel/CancelToken.js","../webpack://typescript-action/./node_modules/axios/lib/cancel/isCancel.js","../webpack://typescript-action/./node_modules/axios/lib/core/Axios.js","../webpack://typescript-action/./node_modules/axios/lib/core/InterceptorManager.js","../webpack://typescript-action/./node_modules/axios/lib/core/buildFullPath.js","../webpack://typescript-action/./node_modules/axios/lib/core/createError.js","../webpack://typescript-action/./node_modules/axios/lib/core/dispatchRequest.js","../webpack://typescript-action/./node_modules/axios/lib/core/enhanceError.js","../webpack://typescript-action/./node_modules/axios/lib/core/mergeConfig.js","../webpack://typescript-action/./node_modules/axios/lib/core/settle.js","../webpack://typescript-action/./node_modules/axios/lib/core/transformData.js","../webpack://typescript-action/./node_modules/axios/lib/defaults.js","../webpack://typescript-action/./node_modules/axios/lib/env/data.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/bind.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/buildURL.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/combineURLs.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/cookies.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/isAbsoluteURL.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/isAxiosError.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/isURLSameOrigin.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/normalizeHeaderName.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/parseHeaders.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/spread.js","../webpack://typescript-action/./node_modules/axios/lib/helpers/validator.js","../webpack://typescript-action/./node_modules/axios/lib/utils.js","../webpack://typescript-action/./node_modules/debug/node_modules/ms/index.js","../webpack://typescript-action/./node_modules/debug/src/browser.js","../webpack://typescript-action/./node_modules/debug/src/common.js","../webpack://typescript-action/./node_modules/debug/src/index.js","../webpack://typescript-action/./node_modules/debug/src/node.js","../webpack://typescript-action/./node_modules/follow-redirects/debug.js","../webpack://typescript-action/./node_modules/follow-redirects/index.js","../webpack://typescript-action/./node_modules/has-flag/index.js","../webpack://typescript-action/./node_modules/hpagent/index.js","../webpack://typescript-action/./node_modules/ms/index.js","../webpack://typescript-action/./node_modules/secure-json-parse/index.js","../webpack://typescript-action/./node_modules/supports-color/index.js","../webpack://typescript-action/./node_modules/tunnel/index.js","../webpack://typescript-action/./node_modules/tunnel/lib/tunnel.js","../webpack://typescript-action/external \"assert\"","../webpack://typescript-action/external \"buffer\"","../webpack://typescript-action/external \"events\"","../webpack://typescript-action/external \"fs\"","../webpack://typescript-action/external \"http\"","../webpack://typescript-action/external \"https\"","../webpack://typescript-action/external \"net\"","../webpack://typescript-action/external \"os\"","../webpack://typescript-action/external \"path\"","../webpack://typescript-action/external \"querystring\"","../webpack://typescript-action/external \"stream\"","../webpack://typescript-action/external \"tls\"","../webpack://typescript-action/external \"tty\"","../webpack://typescript-action/external \"url\"","../webpack://typescript-action/external \"util\"","../webpack://typescript-action/external \"zlib\"","../webpack://typescript-action/webpack/bootstrap","../webpack://typescript-action/webpack/runtime/compat","../webpack://typescript-action/webpack/startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst tool_1 = require(\"./tool\");\nconst requests_1 = require(\"./requests\");\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const githubToken = (0, tool_1.loadInput)('githubToken');\n            const githubOrg = (0, tool_1.loadInput)('githubOrg');\n            const githubRepository = (0, tool_1.loadInput)('githubRepository');\n            const githubRunId = (0, tool_1.loadInput)('githubRunId');\n            const elasticApiKeyId = (0, tool_1.loadInput)('elasticApiKeyId');\n            const elasticApiKey = (0, tool_1.loadInput)('elasticApiKey');\n            const elasticHost = (0, tool_1.loadInput)('elasticHost');\n            const elasticIndex = (0, tool_1.loadInput)('elasticIndex');\n            core.info(`Initializing Github Connection Instance`);\n            const githubInstance = (0, requests_1.createAxiosGithubInstance)(githubToken);\n            core.info(`Initializing Elastic Instance`);\n            const elasticInstance = (0, requests_1.createElasticInstance)(elasticHost, elasticApiKeyId, elasticApiKey);\n            const metadataUrl = `/repos/${githubOrg}/${githubRepository}/actions/runs/${githubRunId}`;\n            core.info(`Retrieving metadata from Github Pipeline ${githubRunId}`);\n            const metadata = yield (0, requests_1.sendRequestToGithub)(githubInstance, metadataUrl);\n            const jobsUrl = metadata.jobs_url;\n            const achievedJobs = [];\n            core.info(`Retrieving jobs list  from Github Pipeline ${githubRunId}`);\n            const jobs = yield (0, requests_1.sendRequestToGithub)(githubInstance, jobsUrl);\n            if (!jobs.ok) {\n                core.setFailed('Failed to get run jobs');\n            }\n            for (const job of jobs.content.jobs) {\n                if (job.status === 'completed') {\n                    core.info(`Parsing Job '${job.name}'`);\n                    achievedJobs[job.id] = {\n                        id: job.id,\n                        name: job.name,\n                        status: job.status,\n                        conclusion: job.conclusion,\n                        steps: job.steps,\n                        logs: JSON.parse(yield (0, requests_1.sendRequestToGithub)(githubInstance, `/repos/${githubOrg}/${githubRepository}/actions/jobs/${job.id}/logs`))\n                    };\n                }\n                core.info(`Sending job '${job.name}' logs to ELK`);\n                yield (0, requests_1.sendMessageToElastic)(elasticInstance, JSON.stringify(achievedJobs[job.id]), elasticIndex);\n            }\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                core.setFailed(e.message);\n            }\n        }\n    });\n}\nrun();\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createElasticInstance = exports.createAxiosGithubInstance = exports.sendMessageToElastic = exports.sendRequestToGithub = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nconst axios_1 = __importDefault(require(\"axios\"));\nconst elasticsearch_1 = require(\"@elastic/elasticsearch\");\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction sendRequestToGithub(client, path) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const response = yield client.get(path);\n            core.debug(response.data);\n            return response.data;\n        }\n        catch (e) {\n            throw new Error(`Cannot send request to Github : ${e}`);\n        }\n    });\n}\nexports.sendRequestToGithub = sendRequestToGithub;\nfunction sendMessageToElastic(client, message, elasticIndex) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            core.debug(`Push to elasticIndex`);\n            client.index({ index: elasticIndex, body: message });\n        }\n        catch (e) {\n            throw new Error(`Cannot send request to Elastic : ${e}`);\n        }\n    });\n}\nexports.sendMessageToElastic = sendMessageToElastic;\nfunction createAxiosGithubInstance(token) {\n    return axios_1.default.create({\n        baseURL: 'https://api.github.com',\n        timeout: 1000,\n        headers: { Authorization: `token ${token}` }\n    });\n}\nexports.createAxiosGithubInstance = createAxiosGithubInstance;\nfunction createElasticInstance(elasticUrl, elasticApiKeyId, elasticApiKey) {\n    return new elasticsearch_1.Client({\n        node: elasticUrl,\n        auth: {\n            apiKey: {\n                id: elasticApiKeyId,\n                api_key: elasticApiKey\n            }\n        }\n    });\n}\nexports.createElasticInstance = createElasticInstance;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadInput = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nfunction loadInput(inputName) {\n    try {\n        return core.getInput(inputName);\n    }\n    catch (e) {\n        throw new Error(`Cannot retrieve parameters ${inputName}`);\n    }\n}\nexports.loadInput = loadInput;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    return inputs;\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issueCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        options.headers['Authorization'] =\n            'Basic ' +\n                Buffer.from(this.username + ':' + this.password).toString('base64');\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        options.headers['Authorization'] = 'Bearer ' + this.token;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        options.headers['Authorization'] =\n            'Basic ' + Buffer.from('PAT:' + this.token).toString('base64');\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst pm = require(\"./proxy\");\nlet tunnel;\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    let proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return new Promise(async (resolve, reject) => {\n            let output = Buffer.alloc(0);\n            this.message.on('data', (chunk) => {\n                output = Buffer.concat([output, chunk]);\n            });\n            this.message.on('end', () => {\n                resolve(output.toString());\n            });\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    let parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n    }\n    get(requestUrl, additionalHeaders) {\n        return this.request('GET', requestUrl, null, additionalHeaders || {});\n    }\n    del(requestUrl, additionalHeaders) {\n        return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return this.request('POST', requestUrl, data, additionalHeaders || {});\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return this.request('PUT', requestUrl, data, additionalHeaders || {});\n    }\n    head(requestUrl, additionalHeaders) {\n        return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return this.request(verb, requestUrl, stream, additionalHeaders);\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    async getJson(requestUrl, additionalHeaders = {}) {\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        let res = await this.get(requestUrl, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async postJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.post(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async putJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.put(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async patchJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.patch(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    async request(verb, requestUrl, data, headers) {\n        if (this._disposed) {\n            throw new Error('Client has already been disposed.');\n        }\n        let parsedUrl = new URL(requestUrl);\n        let info = this._prepareRequest(verb, parsedUrl, headers);\n        // Only perform retries on reads since writes may not be idempotent.\n        let maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1\n            ? this._maxRetries + 1\n            : 1;\n        let numTries = 0;\n        let response;\n        while (numTries < maxTries) {\n            response = await this.requestRaw(info, data);\n            // Check if it's an authentication challenge\n            if (response &&\n                response.message &&\n                response.message.statusCode === HttpCodes.Unauthorized) {\n                let authenticationHandler;\n                for (let i = 0; i < this.handlers.length; i++) {\n                    if (this.handlers[i].canHandleAuthentication(response)) {\n                        authenticationHandler = this.handlers[i];\n                        break;\n                    }\n                }\n                if (authenticationHandler) {\n                    return authenticationHandler.handleAuthentication(this, info, data);\n                }\n                else {\n                    // We have received an unauthorized response but have no handlers to handle it.\n                    // Let the response return to the caller.\n                    return response;\n                }\n            }\n            let redirectsRemaining = this._maxRedirects;\n            while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1 &&\n                this._allowRedirects &&\n                redirectsRemaining > 0) {\n                const redirectUrl = response.message.headers['location'];\n                if (!redirectUrl) {\n                    // if there's no location to redirect to, we won't\n                    break;\n                }\n                let parsedRedirectUrl = new URL(redirectUrl);\n                if (parsedUrl.protocol == 'https:' &&\n                    parsedUrl.protocol != parsedRedirectUrl.protocol &&\n                    !this._allowRedirectDowngrade) {\n                    throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                }\n                // we need to finish reading the response before reassigning response\n                // which will leak the open socket.\n                await response.readBody();\n                // strip authorization header if redirected to a different hostname\n                if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                    for (let header in headers) {\n                        // header names are case insensitive\n                        if (header.toLowerCase() === 'authorization') {\n                            delete headers[header];\n                        }\n                    }\n                }\n                // let's make the request with the new redirectUrl\n                info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                response = await this.requestRaw(info, data);\n                redirectsRemaining--;\n            }\n            if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {\n                // If not a retry code, return immediately instead of retrying\n                return response;\n            }\n            numTries += 1;\n            if (numTries < maxTries) {\n                await response.readBody();\n                await this._performExponentialBackoff(numTries);\n            }\n        }\n        return response;\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return new Promise((resolve, reject) => {\n            let callbackForResult = function (err, res) {\n                if (err) {\n                    reject(err);\n                }\n                resolve(res);\n            };\n            this.requestRawWithCallback(info, data, callbackForResult);\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        let socket;\n        if (typeof data === 'string') {\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        let handleResult = (err, res) => {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        };\n        let req = info.httpModule.request(info.options, (msg) => {\n            let res = new HttpClientResponse(msg);\n            handleResult(null, res);\n        });\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error('Request timeout: ' + info.options.path), null);\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err, null);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        let parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            this.handlers.forEach(handler => {\n                handler.prepareRequest(info.options);\n            });\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        let proxyUrl = pm.getProxyUrl(parsedUrl);\n        let useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (!!agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (!!this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        if (useProxy) {\n            // If using proxy, need tunnel\n            if (!tunnel) {\n                tunnel = require('tunnel');\n            }\n            const agentOptions = {\n                maxSockets: maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: {\n                    ...((proxyUrl.username || proxyUrl.password) && {\n                        proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                    }),\n                    host: proxyUrl.hostname,\n                    port: proxyUrl.port\n                }\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets: maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n        return new Promise(resolve => setTimeout(() => resolve(), ms));\n    }\n    static dateTimeDeserializer(key, value) {\n        if (typeof value === 'string') {\n            let a = new Date(value);\n            if (!isNaN(a.valueOf())) {\n                return a;\n            }\n        }\n        return value;\n    }\n    async _processResponse(res, options) {\n        return new Promise(async (resolve, reject) => {\n            const statusCode = res.message.statusCode;\n            const response = {\n                statusCode: statusCode,\n                result: null,\n                headers: {}\n            };\n            // not found leads to null obj returned\n            if (statusCode == HttpCodes.NotFound) {\n                resolve(response);\n            }\n            let obj;\n            let contents;\n            // get the result from the body\n            try {\n                contents = await res.readBody();\n                if (contents && contents.length > 0) {\n                    if (options && options.deserializeDates) {\n                        obj = JSON.parse(contents, HttpClient.dateTimeDeserializer);\n                    }\n                    else {\n                        obj = JSON.parse(contents);\n                    }\n                    response.result = obj;\n                }\n                response.headers = res.message.headers;\n            }\n            catch (err) {\n                // Invalid resource (contents not json);  leaving result obj null\n            }\n            // note that 3xx redirects are handled by the http layer.\n            if (statusCode > 299) {\n                let msg;\n                // if exception/error in body, attempt to get better error\n                if (obj && obj.message) {\n                    msg = obj.message;\n                }\n                else if (contents && contents.length > 0) {\n                    // it may be the case that the exception is in the body message as string\n                    msg = contents;\n                }\n                else {\n                    msg = 'Failed request: (' + statusCode + ')';\n                }\n                let err = new HttpClientError(msg, statusCode);\n                err.result = response.result;\n                reject(err);\n            }\n            else {\n                resolve(response);\n            }\n        });\n    }\n}\nexports.HttpClient = HttpClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProxyUrl(reqUrl) {\n    let usingSsl = reqUrl.protocol === 'https:';\n    let proxyUrl;\n    if (checkBypass(reqUrl)) {\n        return proxyUrl;\n    }\n    let proxyVar;\n    if (usingSsl) {\n        proxyVar = process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n    }\n    else {\n        proxyVar = process.env['http_proxy'] || process.env['HTTP_PROXY'];\n    }\n    if (proxyVar) {\n        proxyUrl = new URL(proxyVar);\n    }\n    return proxyUrl;\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    let noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    let upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (let upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion_timeout', 'keep_alive', 'typed_keys', 'keep_on_completion', 'batched_reduce_size', 'request_cache', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'explain', 'stored_fields', 'docvalue_fields', 'from', 'ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'lenient', 'preference', 'q', 'routing', 'search_type', 'size', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'suggest_field', 'suggest_mode', 'suggest_size', 'suggest_text', 'timeout', 'track_scores', 'track_total_hits', 'allow_partial_search_results', 'version', 'seq_no_primary_term', 'max_concurrent_shard_requests']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', waitForCompletionTimeout: 'wait_for_completion_timeout', keepAlive: 'keep_alive', typedKeys: 'typed_keys', keepOnCompletion: 'keep_on_completion', batchedReduceSize: 'batched_reduce_size', requestCache: 'request_cache', analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', storedFields: 'stored_fields', docvalueFields: 'docvalue_fields', ignoreUnavailable: 'ignore_unavailable', ignoreThrottled: 'ignore_throttled', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', terminateAfter: 'terminate_after', suggestField: 'suggest_field', suggestMode: 'suggest_mode', suggestSize: 'suggest_size', suggestText: 'suggest_text', trackScores: 'track_scores', trackTotalHits: 'track_total_hits', allowPartialSearchResults: 'allow_partial_search_results', seqNoPrimaryTerm: 'seq_no_primary_term', maxConcurrentShardRequests: 'max_concurrent_shard_requests' }\n\nfunction AsyncSearchApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nAsyncSearchApi.prototype.delete = function asyncSearchDeleteApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_async_search' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nAsyncSearchApi.prototype.get = function asyncSearchGetApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_async_search' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nAsyncSearchApi.prototype.status = function asyncSearchStatusApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_async_search' + '/' + 'status' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nAsyncSearchApi.prototype.submit = function asyncSearchSubmitApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_async_search'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_async_search'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = AsyncSearchApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction AutoscalingApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nAutoscalingApi.prototype.deleteAutoscalingPolicy = function autoscalingDeleteAutoscalingPolicyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nAutoscalingApi.prototype.getAutoscalingCapacity = function autoscalingGetAutoscalingCapacityApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_autoscaling' + '/' + 'capacity'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nAutoscalingApi.prototype.getAutoscalingPolicy = function autoscalingGetAutoscalingPolicyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nAutoscalingApi.prototype.putAutoscalingPolicy = function autoscalingPutAutoscalingPolicyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(AutoscalingApi.prototype, {\n  delete_autoscaling_policy: { get () { return this.deleteAutoscalingPolicy } },\n  get_autoscaling_capacity: { get () { return this.getAutoscalingCapacity } },\n  get_autoscaling_policy: { get () { return this.getAutoscalingPolicy } },\n  put_autoscaling_policy: { get () { return this.putAutoscalingPolicy } }\n})\n\nmodule.exports = AutoscalingApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['wait_for_active_shards', 'refresh', 'routing', 'timeout', 'type', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'pipeline', 'require_alias', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { waitForActiveShards: 'wait_for_active_shards', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', requireAlias: 'require_alias', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction bulkApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_bulk'\n  } else if ((index) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_bulk'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_bulk'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = bulkApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['format', 'local', 'h', 'help', 's', 'v', 'expand_wildcards', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'bytes', 'master_timeout', 'fields', 'time', 'ts', 'health', 'pri', 'include_unloaded_segments', 'allow_no_match', 'allow_no_datafeeds', 'allow_no_jobs', 'from', 'size', 'full_id', 'include_bootstrap', 'active_only', 'detailed', 'index', 'ignore_unavailable', 'nodes', 'actions', 'parent_task_id']\nconst snakeCase = { expandWildcards: 'expand_wildcards', errorTrace: 'error_trace', filterPath: 'filter_path', masterTimeout: 'master_timeout', includeUnloadedSegments: 'include_unloaded_segments', allowNoMatch: 'allow_no_match', allowNoDatafeeds: 'allow_no_datafeeds', allowNoJobs: 'allow_no_jobs', fullId: 'full_id', includeBootstrap: 'include_bootstrap', activeOnly: 'active_only', ignoreUnavailable: 'ignore_unavailable', parentTaskId: 'parent_task_id' }\n\nfunction CatApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nCatApi.prototype.aliases = function catAliasesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'aliases' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'aliases'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.allocation = function catAllocationApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'allocation' + '/' + encodeURIComponent(node_id || nodeId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'allocation'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.count = function catCountApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'count' + '/' + encodeURIComponent(index)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'count'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.fielddata = function catFielddataApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, fields, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((fields) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'fielddata' + '/' + encodeURIComponent(fields)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'fielddata'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.health = function catHealthApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat' + '/' + 'health'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.help = function catHelpApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.indices = function catIndicesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'indices' + '/' + encodeURIComponent(index)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'indices'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.master = function catMasterApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat' + '/' + 'master'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.mlDataFrameAnalytics = function catMlDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'ml' + '/' + 'data_frame' + '/' + 'analytics'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.mlDatafeeds = function catMlDatafeedsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((datafeed_id || datafeedId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'ml' + '/' + 'datafeeds'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.mlJobs = function catMlJobsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((job_id || jobId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'ml' + '/' + 'anomaly_detectors'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.mlTrainedModels = function catMlTrainedModelsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, modelId, model_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((model_id || modelId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'ml' + '/' + 'trained_models'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.nodeattrs = function catNodeattrsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat' + '/' + 'nodeattrs'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.nodes = function catNodesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat' + '/' + 'nodes'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.pendingTasks = function catPendingTasksApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat' + '/' + 'pending_tasks'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.plugins = function catPluginsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat' + '/' + 'plugins'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.recovery = function catRecoveryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'recovery' + '/' + encodeURIComponent(index)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'recovery'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.repositories = function catRepositoriesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat' + '/' + 'repositories'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.segments = function catSegmentsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'segments' + '/' + encodeURIComponent(index)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'segments'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.shards = function catShardsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'shards' + '/' + encodeURIComponent(index)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'shards'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.snapshots = function catSnapshotsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, repository, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((repository) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'snapshots' + '/' + encodeURIComponent(repository)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'snapshots'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.tasks = function catTasksApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cat' + '/' + 'tasks'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.templates = function catTemplatesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'templates' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'templates'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.threadPool = function catThreadPoolApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, threadPoolPatterns, thread_pool_patterns, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((thread_pool_patterns || threadPoolPatterns) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'thread_pool' + '/' + encodeURIComponent(thread_pool_patterns || threadPoolPatterns)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'thread_pool'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCatApi.prototype.transforms = function catTransformsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, transformId, transform_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((transform_id || transformId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'transforms' + '/' + encodeURIComponent(transform_id || transformId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cat' + '/' + 'transforms'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(CatApi.prototype, {\n  ml_data_frame_analytics: { get () { return this.mlDataFrameAnalytics } },\n  ml_datafeeds: { get () { return this.mlDatafeeds } },\n  ml_jobs: { get () { return this.mlJobs } },\n  ml_trained_models: { get () { return this.mlTrainedModels } },\n  pending_tasks: { get () { return this.pendingTasks } },\n  thread_pool: { get () { return this.threadPool } }\n})\n\nmodule.exports = CatApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_active_shards']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', waitForActiveShards: 'wait_for_active_shards' }\n\nfunction CcrApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nCcrApi.prototype.deleteAutoFollowPattern = function ccrDeleteAutoFollowPatternApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.follow = function ccrFollowApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'follow'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.followInfo = function ccrFollowInfoApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'info'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.followStats = function ccrFollowStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'stats'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.forgetFollower = function ccrForgetFollowerApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'forget_follower'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.getAutoFollowPattern = function ccrGetAutoFollowPatternApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ccr' + '/' + 'auto_follow'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.pauseAutoFollowPattern = function ccrPauseAutoFollowPatternApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name) + '/' + 'pause'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.pauseFollow = function ccrPauseFollowApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'pause_follow'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.putAutoFollowPattern = function ccrPutAutoFollowPatternApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.resumeAutoFollowPattern = function ccrResumeAutoFollowPatternApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name) + '/' + 'resume'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.resumeFollow = function ccrResumeFollowApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'resume_follow'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.stats = function ccrStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_ccr' + '/' + 'stats'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nCcrApi.prototype.unfollow = function ccrUnfollowApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'unfollow'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(CcrApi.prototype, {\n  delete_auto_follow_pattern: { get () { return this.deleteAutoFollowPattern } },\n  follow_info: { get () { return this.followInfo } },\n  follow_stats: { get () { return this.followStats } },\n  forget_follower: { get () { return this.forgetFollower } },\n  get_auto_follow_pattern: { get () { return this.getAutoFollowPattern } },\n  pause_auto_follow_pattern: { get () { return this.pauseAutoFollowPattern } },\n  pause_follow: { get () { return this.pauseFollow } },\n  put_auto_follow_pattern: { get () { return this.putAutoFollowPattern } },\n  resume_auto_follow_pattern: { get () { return this.resumeAutoFollowPattern } },\n  resume_follow: { get () { return this.resumeFollow } }\n})\n\nmodule.exports = CcrApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction clearScrollApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, scrollId, scroll_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((scroll_id || scrollId) != null) {\n    if (method == null) method = 'DELETE'\n    path = '/' + '_search' + '/' + 'scroll' + '/' + encodeURIComponent(scroll_id || scrollId)\n  } else {\n    if (method == null) method = 'DELETE'\n    path = '/' + '_search' + '/' + 'scroll'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = clearScrollApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction closePointInTimeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_pit'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = closePointInTimeApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['include_yes_decisions', 'include_disk_info', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'timeout', 'master_timeout', 'wait_for_removal', 'local', 'flat_settings', 'include_defaults', 'expand_wildcards', 'level', 'wait_for_active_shards', 'wait_for_nodes', 'wait_for_events', 'wait_for_no_relocating_shards', 'wait_for_no_initializing_shards', 'wait_for_status', 'node_ids', 'node_names', 'create', 'dry_run', 'explain', 'retry_failed', 'metric', 'wait_for_metadata_version', 'wait_for_timeout', 'ignore_unavailable', 'allow_no_indices']\nconst snakeCase = { includeYesDecisions: 'include_yes_decisions', includeDiskInfo: 'include_disk_info', errorTrace: 'error_trace', filterPath: 'filter_path', masterTimeout: 'master_timeout', waitForRemoval: 'wait_for_removal', flatSettings: 'flat_settings', includeDefaults: 'include_defaults', expandWildcards: 'expand_wildcards', waitForActiveShards: 'wait_for_active_shards', waitForNodes: 'wait_for_nodes', waitForEvents: 'wait_for_events', waitForNoRelocatingShards: 'wait_for_no_relocating_shards', waitForNoInitializingShards: 'wait_for_no_initializing_shards', waitForStatus: 'wait_for_status', nodeIds: 'node_ids', nodeNames: 'node_names', dryRun: 'dry_run', retryFailed: 'retry_failed', waitForMetadataVersion: 'wait_for_metadata_version', waitForTimeout: 'wait_for_timeout', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices' }\n\nfunction ClusterApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nClusterApi.prototype.allocationExplain = function clusterAllocationExplainApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_cluster' + '/' + 'allocation' + '/' + 'explain'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.deleteComponentTemplate = function clusterDeleteComponentTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.deleteVotingConfigExclusions = function clusterDeleteVotingConfigExclusionsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_cluster' + '/' + 'voting_config_exclusions'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.existsComponentTemplate = function clusterExistsComponentTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'HEAD'\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.getComponentTemplate = function clusterGetComponentTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_component_template' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_component_template'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.getSettings = function clusterGetSettingsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cluster' + '/' + 'settings'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.health = function clusterHealthApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'health' + '/' + encodeURIComponent(index)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'health'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.pendingTasks = function clusterPendingTasksApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_cluster' + '/' + 'pending_tasks'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.postVotingConfigExclusions = function clusterPostVotingConfigExclusionsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_cluster' + '/' + 'voting_config_exclusions'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.putComponentTemplate = function clusterPutComponentTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.putSettings = function clusterPutSettingsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_cluster' + '/' + 'settings'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.remoteInfo = function clusterRemoteInfoApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_remote' + '/' + 'info'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.reroute = function clusterRerouteApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_cluster' + '/' + 'reroute'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.state = function clusterStateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required url components\n  if (params.index != null && (params.metric == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: metric')\n    return handleError(err, callback)\n  }\n\n  let { method, body, metric, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((metric) != null && (index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'state' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index)\n  } else if ((metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'state' + '/' + encodeURIComponent(metric)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'state'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nClusterApi.prototype.stats = function clusterStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'stats' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(ClusterApi.prototype, {\n  allocation_explain: { get () { return this.allocationExplain } },\n  delete_component_template: { get () { return this.deleteComponentTemplate } },\n  delete_voting_config_exclusions: { get () { return this.deleteVotingConfigExclusions } },\n  exists_component_template: { get () { return this.existsComponentTemplate } },\n  get_component_template: { get () { return this.getComponentTemplate } },\n  get_settings: { get () { return this.getSettings } },\n  pending_tasks: { get () { return this.pendingTasks } },\n  post_voting_config_exclusions: { get () { return this.postVotingConfigExclusions } },\n  put_component_template: { get () { return this.putComponentTemplate } },\n  put_settings: { get () { return this.putSettings } },\n  remote_info: { get () { return this.remoteInfo } }\n})\n\nmodule.exports = ClusterApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'min_score', 'preference', 'routing', 'q', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'lenient', 'terminate_after', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { ignoreUnavailable: 'ignore_unavailable', ignoreThrottled: 'ignore_throttled', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', minScore: 'min_score', analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', terminateAfter: 'terminate_after', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction countApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_count'\n  } else if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_count'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_count'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = countApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['wait_for_active_shards', 'refresh', 'routing', 'timeout', 'version', 'version_type', 'pipeline', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { waitForActiveShards: 'wait_for_active_shards', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction createApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_create'\n  } else {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_create' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = createApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['accept_data_loss', 'timeout', 'master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { acceptDataLoss: 'accept_data_loss', masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction DanglingIndicesApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nDanglingIndicesApi.prototype.deleteDanglingIndex = function danglingIndicesDeleteDanglingIndexApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index_uuid == null && params.indexUuid == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index_uuid or indexUuid')\n    return handleError(err, callback)\n  }\n\n  let { method, body, indexUuid, index_uuid, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nDanglingIndicesApi.prototype.importDanglingIndex = function danglingIndicesImportDanglingIndexApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index_uuid == null && params.indexUuid == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index_uuid or indexUuid')\n    return handleError(err, callback)\n  }\n\n  let { method, body, indexUuid, index_uuid, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nDanglingIndicesApi.prototype.listDanglingIndices = function danglingIndicesListDanglingIndicesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_dangling'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(DanglingIndicesApi.prototype, {\n  delete_dangling_index: { get () { return this.deleteDanglingIndex } },\n  import_dangling_index: { get () { return this.importDanglingIndex } },\n  list_dangling_indices: { get () { return this.listDanglingIndices } }\n})\n\nmodule.exports = DanglingIndicesApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['wait_for_active_shards', 'refresh', 'routing', 'timeout', 'if_seq_no', 'if_primary_term', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { waitForActiveShards: 'wait_for_active_shards', ifSeqNo: 'if_seq_no', ifPrimaryTerm: 'if_primary_term', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction deleteApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = 'DELETE'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = 'DELETE'\n    path = '/' + encodeURIComponent(index) + '/' + '_doc' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = deleteApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'default_operator', 'df', 'from', 'ignore_unavailable', 'allow_no_indices', 'conflicts', 'expand_wildcards', 'lenient', 'preference', 'q', 'routing', 'scroll', 'search_type', 'search_timeout', 'size', 'max_docs', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'version', 'request_cache', 'refresh', 'timeout', 'wait_for_active_shards', 'scroll_size', 'wait_for_completion', 'requests_per_second', 'slices', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', searchTimeout: 'search_timeout', maxDocs: 'max_docs', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', terminateAfter: 'terminate_after', requestCache: 'request_cache', waitForActiveShards: 'wait_for_active_shards', scrollSize: 'scroll_size', waitForCompletion: 'wait_for_completion', requestsPerSecond: 'requests_per_second', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction deleteByQueryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_delete_by_query'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_delete_by_query'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = deleteByQueryApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['requests_per_second', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { requestsPerSecond: 'requests_per_second', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction deleteByQueryRethrottleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.task_id == null && params.taskId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId')\n    return handleError(err, callback)\n  }\n  if (params.requests_per_second == null && params.requestsPerSecond == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: requests_per_second or requestsPerSecond')\n    return handleError(err, callback)\n  }\n\n  let { method, body, taskId, task_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_delete_by_query' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_rethrottle'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = deleteByQueryRethrottleApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['timeout', 'master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction deleteScriptApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_scripts' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = deleteScriptApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', waitForCompletion: 'wait_for_completion' }\n\nfunction EnrichApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nEnrichApi.prototype.deletePolicy = function enrichDeletePolicyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_enrich' + '/' + 'policy' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nEnrichApi.prototype.executePolicy = function enrichExecutePolicyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_enrich' + '/' + 'policy' + '/' + encodeURIComponent(name) + '/' + '_execute'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nEnrichApi.prototype.getPolicy = function enrichGetPolicyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_enrich' + '/' + 'policy' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_enrich' + '/' + 'policy'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nEnrichApi.prototype.putPolicy = function enrichPutPolicyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_enrich' + '/' + 'policy' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nEnrichApi.prototype.stats = function enrichStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_enrich' + '/' + '_stats'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(EnrichApi.prototype, {\n  delete_policy: { get () { return this.deletePolicy } },\n  execute_policy: { get () { return this.executePolicy } },\n  get_policy: { get () { return this.getPolicy } },\n  put_policy: { get () { return this.putPolicy } }\n})\n\nmodule.exports = EnrichApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion_timeout', 'keep_alive', 'keep_on_completion']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', waitForCompletionTimeout: 'wait_for_completion_timeout', keepAlive: 'keep_alive', keepOnCompletion: 'keep_on_completion' }\n\nfunction EqlApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nEqlApi.prototype.delete = function eqlDeleteApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_eql' + '/' + 'search' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nEqlApi.prototype.get = function eqlGetApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_eql' + '/' + 'search' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nEqlApi.prototype.getStatus = function eqlGetStatusApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_eql' + '/' + 'search' + '/' + 'status' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nEqlApi.prototype.search = function eqlSearchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_eql' + '/' + 'search'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(EqlApi.prototype, {\n  get_status: { get () { return this.getStatus } }\n})\n\nmodule.exports = EqlApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['stored_fields', 'preference', 'realtime', 'refresh', 'routing', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { storedFields: 'stored_fields', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction existsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = 'HEAD'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = 'HEAD'\n    path = '/' + encodeURIComponent(index) + '/' + '_doc' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = existsApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['preference', 'realtime', 'refresh', 'routing', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction existsSourceApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.id != null && (params.type == null || params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: type, index')\n    return handleError(err, callback)\n  } else if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = 'HEAD'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_source'\n  } else {\n    if (method == null) method = 'HEAD'\n    path = '/' + encodeURIComponent(index) + '/' + '_source' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = existsSourceApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['analyze_wildcard', 'analyzer', 'default_operator', 'df', 'stored_fields', 'lenient', 'preference', 'q', 'routing', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', storedFields: 'stored_fields', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction explainApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_explain'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_explain' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = explainApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction FeaturesApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nFeaturesApi.prototype.getFeatures = function featuresGetFeaturesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_features'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nFeaturesApi.prototype.resetFeatures = function featuresResetFeaturesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_features' + '/' + '_reset'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(FeaturesApi.prototype, {\n  get_features: { get () { return this.getFeatures } },\n  reset_features: { get () { return this.resetFeatures } }\n})\n\nmodule.exports = FeaturesApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['fields', 'ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'include_unmapped', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', includeUnmapped: 'include_unmapped', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction fieldCapsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_field_caps'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_field_caps'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = fieldCapsApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['wait_for_advance', 'wait_for_index', 'checkpoints', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { waitForAdvance: 'wait_for_advance', waitForIndex: 'wait_for_index', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction FleetApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nFleetApi.prototype.globalCheckpoints = function fleetGlobalCheckpointsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + encodeURIComponent(index) + '/' + '_fleet' + '/' + 'global_checkpoints'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(FleetApi.prototype, {\n  global_checkpoints: { get () { return this.globalCheckpoints } }\n})\n\nmodule.exports = FleetApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['stored_fields', 'preference', 'realtime', 'refresh', 'routing', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { storedFields: 'stored_fields', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction getApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_doc' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = getApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction getScriptApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_scripts' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = getScriptApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction getScriptContextApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_script_context'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = getScriptContextApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction getScriptLanguagesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_script_language'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = getScriptLanguagesApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['preference', 'realtime', 'refresh', 'routing', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction getSourceApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_source'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_source' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = getSourceApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['routing', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction GraphApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nGraphApi.prototype.explore = function graphExploreApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_graph' + '/' + 'explore'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_graph' + '/' + 'explore'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = GraphApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'only_managed', 'only_errors', 'dry_run']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', onlyManaged: 'only_managed', onlyErrors: 'only_errors', dryRun: 'dry_run' }\n\nfunction IlmApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nIlmApi.prototype.deleteLifecycle = function ilmDeleteLifecycleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.policy == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy')\n    return handleError(err, callback)\n  }\n\n  let { method, body, policy, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.explainLifecycle = function ilmExplainLifecycleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'explain'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.getLifecycle = function ilmGetLifecycleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, policy, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((policy) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ilm' + '/' + 'policy'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.getStatus = function ilmGetStatusApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_ilm' + '/' + 'status'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.migrateToDataTiers = function ilmMigrateToDataTiersApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ilm' + '/' + 'migrate_to_data_tiers'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.moveToStep = function ilmMoveToStepApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ilm' + '/' + 'move' + '/' + encodeURIComponent(index)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.putLifecycle = function ilmPutLifecycleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.policy == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy')\n    return handleError(err, callback)\n  }\n\n  let { method, body, policy, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.removePolicy = function ilmRemovePolicyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'remove'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.retry = function ilmRetryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'retry'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.start = function ilmStartApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ilm' + '/' + 'start'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIlmApi.prototype.stop = function ilmStopApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ilm' + '/' + 'stop'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(IlmApi.prototype, {\n  delete_lifecycle: { get () { return this.deleteLifecycle } },\n  explain_lifecycle: { get () { return this.explainLifecycle } },\n  get_lifecycle: { get () { return this.getLifecycle } },\n  get_status: { get () { return this.getStatus } },\n  migrate_to_data_tiers: { get () { return this.migrateToDataTiers } },\n  move_to_step: { get () { return this.moveToStep } },\n  put_lifecycle: { get () { return this.putLifecycle } },\n  remove_policy: { get () { return this.removePolicy } }\n})\n\nmodule.exports = IlmApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['wait_for_active_shards', 'op_type', 'refresh', 'routing', 'timeout', 'version', 'version_type', 'if_seq_no', 'if_primary_term', 'pipeline', 'require_alias', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { waitForActiveShards: 'wait_for_active_shards', opType: 'op_type', versionType: 'version_type', ifSeqNo: 'if_seq_no', ifPrimaryTerm: 'if_primary_term', requireAlias: 'require_alias', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction indexApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id)\n  } else if ((index) != null && (id) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_doc' + '/' + encodeURIComponent(id)\n  } else if ((index) != null && (type) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type)\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_doc'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = indexApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['timeout', 'master_timeout', 'ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'index', 'fielddata', 'fields', 'query', 'request', 'wait_for_active_shards', 'include_type_name', 'run_expensive_tasks', 'flush', 'local', 'flat_settings', 'include_defaults', 'force', 'wait_if_ongoing', 'max_num_segments', 'only_expunge_deletes', 'create', 'cause', 'write_index_only', 'preserve_existing', 'order', 'detailed', 'active_only', 'dry_run', 'verbose', 'status', 'copy_settings', 'completion_fields', 'fielddata_fields', 'groups', 'level', 'types', 'include_segment_file_sizes', 'include_unloaded_segments', 'forbid_closed_indices', 'wait_for_completion', 'only_ancient_segments', 'explain', 'q', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'lenient', 'rewrite', 'all_shards']\nconst snakeCase = { masterTimeout: 'master_timeout', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', errorTrace: 'error_trace', filterPath: 'filter_path', waitForActiveShards: 'wait_for_active_shards', includeTypeName: 'include_type_name', runExpensiveTasks: 'run_expensive_tasks', flatSettings: 'flat_settings', includeDefaults: 'include_defaults', waitIfOngoing: 'wait_if_ongoing', maxNumSegments: 'max_num_segments', onlyExpungeDeletes: 'only_expunge_deletes', writeIndexOnly: 'write_index_only', preserveExisting: 'preserve_existing', activeOnly: 'active_only', dryRun: 'dry_run', copySettings: 'copy_settings', completionFields: 'completion_fields', fielddataFields: 'fielddata_fields', includeSegmentFileSizes: 'include_segment_file_sizes', includeUnloadedSegments: 'include_unloaded_segments', forbidClosedIndices: 'forbid_closed_indices', waitForCompletion: 'wait_for_completion', onlyAncientSegments: 'only_ancient_segments', analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', allShards: 'all_shards' }\n\nfunction IndicesApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nIndicesApi.prototype.addBlock = function indicesAddBlockApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.block == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: block')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.block != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, block, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + encodeURIComponent(index) + '/' + '_block' + '/' + encodeURIComponent(block)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.analyze = function indicesAnalyzeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_analyze'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_analyze'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.clearCache = function indicesClearCacheApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_cache' + '/' + 'clear'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_cache' + '/' + 'clear'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.clone = function indicesCloneApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.target == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.target != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, target, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + encodeURIComponent(index) + '/' + '_clone' + '/' + encodeURIComponent(target)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.close = function indicesCloseApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_close'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.create = function indicesCreateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + encodeURIComponent(index)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.createDataStream = function indicesCreateDataStreamApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_data_stream' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.dataStreamsStats = function indicesDataStreamsStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_data_stream' + '/' + encodeURIComponent(name) + '/' + '_stats'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_data_stream' + '/' + '_stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.delete = function indicesDeleteApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + encodeURIComponent(index)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.deleteAlias = function indicesDeleteAliasApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.name != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (name) != null) {\n    if (method == null) method = 'DELETE'\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'DELETE'\n    path = '/' + encodeURIComponent(index) + '/' + '_aliases' + '/' + encodeURIComponent(name)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.deleteDataStream = function indicesDeleteDataStreamApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_data_stream' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.deleteIndexTemplate = function indicesDeleteIndexTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.deleteTemplate = function indicesDeleteTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.diskUsage = function indicesDiskUsageApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_disk_usage'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.exists = function indicesExistsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'HEAD'\n  path = '/' + encodeURIComponent(index)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.existsAlias = function indicesExistsAliasApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (name) != null) {\n    if (method == null) method = 'HEAD'\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'HEAD'\n    path = '/' + '_alias' + '/' + encodeURIComponent(name)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.existsIndexTemplate = function indicesExistsIndexTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'HEAD'\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.existsTemplate = function indicesExistsTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'HEAD'\n  path = '/' + '_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.existsType = function indicesExistsTypeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.type == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: type')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'HEAD'\n  path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.fieldUsageStats = function indicesFieldUsageStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + encodeURIComponent(index) + '/' + '_field_usage_stats'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.flush = function indicesFlushApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_flush'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_flush'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.flushSynced = function indicesFlushSyncedApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_flush' + '/' + 'synced'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.forcemerge = function indicesForcemergeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_forcemerge'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_forcemerge'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.freeze = function indicesFreezeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_freeze'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.get = function indicesGetApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + encodeURIComponent(index)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.getAlias = function indicesGetAliasApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name)\n  } else if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_alias' + '/' + encodeURIComponent(name)\n  } else if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_alias'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_alias'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.getDataStream = function indicesGetDataStreamApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_data_stream' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_data_stream'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.getFieldMapping = function indicesGetFieldMappingApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.fields == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: fields')\n    return handleError(err, callback)\n  }\n\n  let { method, body, fields, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (fields) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type) + '/' + 'field' + '/' + encodeURIComponent(fields)\n  } else if ((index) != null && (fields) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + 'field' + '/' + encodeURIComponent(fields)\n  } else if ((type) != null && (fields) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type) + '/' + 'field' + '/' + encodeURIComponent(fields)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_mapping' + '/' + 'field' + '/' + encodeURIComponent(fields)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.getIndexTemplate = function indicesGetIndexTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_index_template' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_index_template'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.getMapping = function indicesGetMappingApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type)\n  } else if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping'\n  } else if ((type) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_mapping'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.getSettings = function indicesGetSettingsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_settings' + '/' + encodeURIComponent(name)\n  } else if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_settings'\n  } else if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_settings' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_settings'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.getTemplate = function indicesGetTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_template' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_template'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.getUpgrade = function indicesGetUpgradeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + encodeURIComponent(index) + '/' + '_upgrade'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.migrateToDataStream = function indicesMigrateToDataStreamApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_data_stream' + '/' + '_migrate' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.open = function indicesOpenApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_open'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.promoteDataStream = function indicesPromoteDataStreamApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_data_stream' + '/' + '_promote' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.putAlias = function indicesPutAliasApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.name != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (name) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_aliases' + '/' + encodeURIComponent(name)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.putIndexTemplate = function indicesPutIndexTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.putMapping = function indicesPutMappingApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mapping'\n  } else if ((index) != null && (type) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type)\n  } else if ((index) != null && (type) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mappings'\n  } else if ((index) != null && (type) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_mappings' + '/' + encodeURIComponent(type)\n  } else if ((index) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping'\n  } else if ((type) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + '_mappings' + '/' + encodeURIComponent(type)\n  } else if ((index) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_mappings'\n  } else {\n    if (method == null) method = 'PUT'\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.putSettings = function indicesPutSettingsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + encodeURIComponent(index) + '/' + '_settings'\n  } else {\n    if (method == null) method = 'PUT'\n    path = '/' + '_settings'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.putTemplate = function indicesPutTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_template' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.recovery = function indicesRecoveryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_recovery'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_recovery'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.refresh = function indicesRefreshApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_refresh'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_refresh'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.reloadSearchAnalyzers = function indicesReloadSearchAnalyzersApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_reload_search_analyzers'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.resolveIndex = function indicesResolveIndexApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_resolve' + '/' + 'index' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.rollover = function indicesRolloverApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.alias == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: alias')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.new_index != null || params.newIndex != null) && (params.alias == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: alias')\n    return handleError(err, callback)\n  }\n\n  let { method, body, alias, newIndex, new_index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((alias) != null && (new_index || newIndex) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(alias) + '/' + '_rollover' + '/' + encodeURIComponent(new_index || newIndex)\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(alias) + '/' + '_rollover'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.segments = function indicesSegmentsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_segments'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_segments'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.shardStores = function indicesShardStoresApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_shard_stores'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_shard_stores'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.shrink = function indicesShrinkApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.target == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.target != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, target, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + encodeURIComponent(index) + '/' + '_shrink' + '/' + encodeURIComponent(target)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.simulateIndexTemplate = function indicesSimulateIndexTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_index_template' + '/' + '_simulate_index' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.simulateTemplate = function indicesSimulateTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + '_index_template' + '/' + '_simulate' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_index_template' + '/' + '_simulate'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.split = function indicesSplitApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.target == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.target != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, target, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + encodeURIComponent(index) + '/' + '_split' + '/' + encodeURIComponent(target)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.stats = function indicesStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, metric, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_stats' + '/' + encodeURIComponent(metric)\n  } else if ((metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_stats' + '/' + encodeURIComponent(metric)\n  } else if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_stats'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.unfreeze = function indicesUnfreezeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_unfreeze'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.updateAliases = function indicesUpdateAliasesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_aliases'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.upgrade = function indicesUpgradeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_upgrade'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIndicesApi.prototype.validateQuery = function indicesValidateQueryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_validate' + '/' + 'query'\n  } else if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_validate' + '/' + 'query'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_validate' + '/' + 'query'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(IndicesApi.prototype, {\n  add_block: { get () { return this.addBlock } },\n  clear_cache: { get () { return this.clearCache } },\n  create_data_stream: { get () { return this.createDataStream } },\n  data_streams_stats: { get () { return this.dataStreamsStats } },\n  delete_alias: { get () { return this.deleteAlias } },\n  delete_data_stream: { get () { return this.deleteDataStream } },\n  delete_index_template: { get () { return this.deleteIndexTemplate } },\n  delete_template: { get () { return this.deleteTemplate } },\n  disk_usage: { get () { return this.diskUsage } },\n  exists_alias: { get () { return this.existsAlias } },\n  exists_index_template: { get () { return this.existsIndexTemplate } },\n  exists_template: { get () { return this.existsTemplate } },\n  exists_type: { get () { return this.existsType } },\n  field_usage_stats: { get () { return this.fieldUsageStats } },\n  flush_synced: { get () { return this.flushSynced } },\n  get_alias: { get () { return this.getAlias } },\n  get_data_stream: { get () { return this.getDataStream } },\n  get_field_mapping: { get () { return this.getFieldMapping } },\n  get_index_template: { get () { return this.getIndexTemplate } },\n  get_mapping: { get () { return this.getMapping } },\n  get_settings: { get () { return this.getSettings } },\n  get_template: { get () { return this.getTemplate } },\n  get_upgrade: { get () { return this.getUpgrade } },\n  migrate_to_data_stream: { get () { return this.migrateToDataStream } },\n  promote_data_stream: { get () { return this.promoteDataStream } },\n  put_alias: { get () { return this.putAlias } },\n  put_index_template: { get () { return this.putIndexTemplate } },\n  put_mapping: { get () { return this.putMapping } },\n  put_settings: { get () { return this.putSettings } },\n  put_template: { get () { return this.putTemplate } },\n  reload_search_analyzers: { get () { return this.reloadSearchAnalyzers } },\n  resolve_index: { get () { return this.resolveIndex } },\n  shard_stores: { get () { return this.shardStores } },\n  simulate_index_template: { get () { return this.simulateIndexTemplate } },\n  simulate_template: { get () { return this.simulateTemplate } },\n  update_aliases: { get () { return this.updateAliases } },\n  validate_query: { get () { return this.validateQuery } }\n})\n\nmodule.exports = IndicesApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction infoApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = infoApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['master_timeout', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'summary', 'verbose']\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction IngestApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nIngestApi.prototype.deletePipeline = function ingestDeletePipelineApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIngestApi.prototype.geoIpStats = function ingestGeoIpStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_ingest' + '/' + 'geoip' + '/' + 'stats'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIngestApi.prototype.getPipeline = function ingestGetPipelineApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ingest' + '/' + 'pipeline'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIngestApi.prototype.processorGrok = function ingestProcessorGrokApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_ingest' + '/' + 'processor' + '/' + 'grok'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIngestApi.prototype.putPipeline = function ingestPutPipelineApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nIngestApi.prototype.simulate = function ingestSimulateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id) + '/' + '_simulate'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + '_simulate'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(IngestApi.prototype, {\n  delete_pipeline: { get () { return this.deletePipeline } },\n  geo_ip_stats: { get () { return this.geoIpStats } },\n  get_pipeline: { get () { return this.getPipeline } },\n  processor_grok: { get () { return this.processorGrok } },\n  put_pipeline: { get () { return this.putPipeline } }\n})\n\nmodule.exports = IngestApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'local', 'accept_enterprise', 'acknowledge', 'type']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', acceptEnterprise: 'accept_enterprise' }\n\nfunction LicenseApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nLicenseApi.prototype.delete = function licenseDeleteApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_license'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nLicenseApi.prototype.get = function licenseGetApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_license'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nLicenseApi.prototype.getBasicStatus = function licenseGetBasicStatusApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_license' + '/' + 'basic_status'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nLicenseApi.prototype.getTrialStatus = function licenseGetTrialStatusApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_license' + '/' + 'trial_status'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nLicenseApi.prototype.post = function licensePostApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_license'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nLicenseApi.prototype.postStartBasic = function licensePostStartBasicApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_license' + '/' + 'start_basic'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nLicenseApi.prototype.postStartTrial = function licensePostStartTrialApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_license' + '/' + 'start_trial'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(LicenseApi.prototype, {\n  get_basic_status: { get () { return this.getBasicStatus } },\n  get_trial_status: { get () { return this.getTrialStatus } },\n  post_start_basic: { get () { return this.postStartBasic } },\n  post_start_trial: { get () { return this.postStartTrial } }\n})\n\nmodule.exports = LicenseApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction LogstashApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nLogstashApi.prototype.deletePipeline = function logstashDeletePipelineApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_logstash' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nLogstashApi.prototype.getPipeline = function logstashGetPipelineApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_logstash' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nLogstashApi.prototype.putPipeline = function logstashPutPipelineApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_logstash' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(LogstashApi.prototype, {\n  delete_pipeline: { get () { return this.deletePipeline } },\n  get_pipeline: { get () { return this.getPipeline } },\n  put_pipeline: { get () { return this.putPipeline } }\n})\n\nmodule.exports = LogstashApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['stored_fields', 'preference', 'realtime', 'refresh', 'routing', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { storedFields: 'stored_fields', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction mgetApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mget'\n  } else if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_mget'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_mget'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = mgetApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction MigrationApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nMigrationApi.prototype.deprecations = function migrationDeprecationsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_migration' + '/' + 'deprecations'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_migration' + '/' + 'deprecations'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = MigrationApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['allow_no_match', 'allow_no_jobs', 'force', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'requests_per_second', 'allow_no_forecasts', 'wait_for_completion', 'lines_to_sample', 'line_merge_size_limit', 'charset', 'format', 'has_header_row', 'column_names', 'delimiter', 'quote', 'should_trim_fields', 'grok_pattern', 'timestamp_field', 'timestamp_format', 'explain', 'calc_interim', 'start', 'end', 'advance_time', 'skip_time', 'duration', 'expires_in', 'max_model_memory', 'expand', 'exclude_interim', 'from', 'size', 'anomaly_score', 'sort', 'desc', 'job_id', 'partition_field_value', 'exclude_generated', 'verbose', 'allow_no_datafeeds', 'influencer_score', 'top_n', 'bucket_span', 'overall_score', 'record_score', 'include', 'include_model_definition', 'decompress_definition', 'tags', 'reset_start', 'reset_end', 'ignore_unavailable', 'allow_no_indices', 'ignore_throttled', 'expand_wildcards', 'reassign', 'delete_intervening_results', 'enabled']\nconst snakeCase = { allowNoMatch: 'allow_no_match', allowNoJobs: 'allow_no_jobs', errorTrace: 'error_trace', filterPath: 'filter_path', requestsPerSecond: 'requests_per_second', allowNoForecasts: 'allow_no_forecasts', waitForCompletion: 'wait_for_completion', linesToSample: 'lines_to_sample', lineMergeSizeLimit: 'line_merge_size_limit', hasHeaderRow: 'has_header_row', columnNames: 'column_names', shouldTrimFields: 'should_trim_fields', grokPattern: 'grok_pattern', timestampField: 'timestamp_field', timestampFormat: 'timestamp_format', calcInterim: 'calc_interim', advanceTime: 'advance_time', skipTime: 'skip_time', expiresIn: 'expires_in', maxModelMemory: 'max_model_memory', excludeInterim: 'exclude_interim', anomalyScore: 'anomaly_score', jobId: 'job_id', partitionFieldValue: 'partition_field_value', excludeGenerated: 'exclude_generated', allowNoDatafeeds: 'allow_no_datafeeds', influencerScore: 'influencer_score', topN: 'top_n', bucketSpan: 'bucket_span', overallScore: 'overall_score', recordScore: 'record_score', includeModelDefinition: 'include_model_definition', decompressDefinition: 'decompress_definition', resetStart: 'reset_start', resetEnd: 'reset_end', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', ignoreThrottled: 'ignore_throttled', expandWildcards: 'expand_wildcards', deleteInterveningResults: 'delete_intervening_results' }\n\nfunction MlApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nMlApi.prototype.closeJob = function mlCloseJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_close'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteCalendar = function mlDeleteCalendarApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, calendarId, calendar_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteCalendarEvent = function mlDeleteCalendarEventApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\n    return handleError(err, callback)\n  }\n  if (params.event_id == null && params.eventId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: event_id or eventId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.event_id != null || params.eventId != null) && ((params.calendar_id == null && params.calendarId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, calendarId, calendar_id, eventId, event_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events' + '/' + encodeURIComponent(event_id || eventId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteCalendarJob = function mlDeleteCalendarJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\n    return handleError(err, callback)\n  }\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.job_id != null || params.jobId != null) && ((params.calendar_id == null && params.calendarId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, calendarId, calendar_id, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'jobs' + '/' + encodeURIComponent(job_id || jobId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteDataFrameAnalytics = function mlDeleteDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteDatafeed = function mlDeleteDatafeedApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteExpiredData = function mlDeleteExpiredDataApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((job_id || jobId) != null) {\n    if (method == null) method = 'DELETE'\n    path = '/' + '_ml' + '/' + '_delete_expired_data' + '/' + encodeURIComponent(job_id || jobId)\n  } else {\n    if (method == null) method = 'DELETE'\n    path = '/' + '_ml' + '/' + '_delete_expired_data'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteFilter = function mlDeleteFilterApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.filter_id == null && params.filterId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, filterId, filter_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteForecast = function mlDeleteForecastApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.forecast_id != null || params.forecastId != null) && ((params.job_id == null && params.jobId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, forecastId, forecast_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((job_id || jobId) != null && (forecast_id || forecastId) != null) {\n    if (method == null) method = 'DELETE'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast' + '/' + encodeURIComponent(forecast_id || forecastId)\n  } else {\n    if (method == null) method = 'DELETE'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteJob = function mlDeleteJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteModelSnapshot = function mlDeleteModelSnapshotApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n  if (params.snapshot_id == null && params.snapshotId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteTrainedModel = function mlDeleteTrainedModelApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, modelId, model_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.deleteTrainedModelAlias = function mlDeleteTrainedModelAliasApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.model_alias == null && params.modelAlias == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_alias or modelAlias')\n    return handleError(err, callback)\n  }\n  if (params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.model_alias != null || params.modelAlias != null) && ((params.model_id == null && params.modelId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: model_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, modelAlias, model_alias, modelId, model_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + 'model_aliases' + '/' + encodeURIComponent(model_alias || modelAlias)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.estimateModelMemory = function mlEstimateModelMemoryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_estimate_model_memory'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.evaluateDataFrame = function mlEvaluateDataFrameApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + '_evaluate'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.explainDataFrameAnalytics = function mlExplainDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_explain'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_explain'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.findFileStructure = function mlFindFileStructureApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'find_file_structure'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.flushJob = function mlFlushJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_flush'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.forecast = function mlForecastApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getBuckets = function mlGetBucketsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.timestamp != null && ((params.job_id == null && params.jobId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, timestamp, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((job_id || jobId) != null && (timestamp) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'buckets' + '/' + encodeURIComponent(timestamp)\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'buckets'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getCalendarEvents = function mlGetCalendarEventsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, calendarId, calendar_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getCalendars = function mlGetCalendarsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, calendarId, calendar_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((calendar_id || calendarId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId)\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'calendars'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getCategories = function mlGetCategoriesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.category_id != null || params.categoryId != null) && ((params.job_id == null && params.jobId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, categoryId, category_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((job_id || jobId) != null && (category_id || categoryId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'categories' + '/' + encodeURIComponent(category_id || categoryId)\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'categories'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getDataFrameAnalytics = function mlGetDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getDataFrameAnalyticsStats = function mlGetDataFrameAnalyticsStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_stats'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getDatafeedStats = function mlGetDatafeedStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((datafeed_id || datafeedId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_stats'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + '_stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getDatafeeds = function mlGetDatafeedsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((datafeed_id || datafeedId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'datafeeds'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getFilters = function mlGetFiltersApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, filterId, filter_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((filter_id || filterId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'filters'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getInfluencers = function mlGetInfluencersApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'influencers'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getJobStats = function mlGetJobStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((job_id || jobId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_stats'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getJobs = function mlGetJobsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((job_id || jobId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getModelSnapshots = function mlGetModelSnapshotsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((job_id || jobId) != null && (snapshot_id || snapshotId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId)\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getOverallBuckets = function mlGetOverallBucketsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'overall_buckets'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getRecords = function mlGetRecordsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'records'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getTrainedModels = function mlGetTrainedModelsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, modelId, model_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((model_id || modelId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'trained_models'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.getTrainedModelsStats = function mlGetTrainedModelsStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, modelId, model_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((model_id || modelId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + '_stats'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + '_stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.info = function mlInfoApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_ml' + '/' + 'info'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.openJob = function mlOpenJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_open'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.postCalendarEvents = function mlPostCalendarEventsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, calendarId, calendar_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.postData = function mlPostDataApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_data'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.previewDataFrameAnalytics = function mlPreviewDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_preview'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_preview'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.previewDatafeed = function mlPreviewDatafeedApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((datafeed_id || datafeedId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_preview'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + '_preview'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.putCalendar = function mlPutCalendarApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, calendarId, calendar_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.putCalendarJob = function mlPutCalendarJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\n    return handleError(err, callback)\n  }\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.job_id != null || params.jobId != null) && ((params.calendar_id == null && params.calendarId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, calendarId, calendar_id, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'jobs' + '/' + encodeURIComponent(job_id || jobId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.putDataFrameAnalytics = function mlPutDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.putDatafeed = function mlPutDatafeedApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.putFilter = function mlPutFilterApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.filter_id == null && params.filterId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, filterId, filter_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.putJob = function mlPutJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.putTrainedModel = function mlPutTrainedModelApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, modelId, model_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.putTrainedModelAlias = function mlPutTrainedModelAliasApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.model_alias == null && params.modelAlias == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_alias or modelAlias')\n    return handleError(err, callback)\n  }\n  if (params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.model_alias != null || params.modelAlias != null) && ((params.model_id == null && params.modelId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: model_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, modelAlias, model_alias, modelId, model_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + 'model_aliases' + '/' + encodeURIComponent(model_alias || modelAlias)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.resetJob = function mlResetJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_reset'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.revertModelSnapshot = function mlRevertModelSnapshotApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n  if (params.snapshot_id == null && params.snapshotId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_revert'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.setUpgradeMode = function mlSetUpgradeModeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'set_upgrade_mode'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.startDataFrameAnalytics = function mlStartDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_start'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.startDatafeed = function mlStartDatafeedApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_start'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.stopDataFrameAnalytics = function mlStopDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_stop'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.stopDatafeed = function mlStopDatafeedApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_stop'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.updateDataFrameAnalytics = function mlUpdateDataFrameAnalyticsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_update'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.updateDatafeed = function mlUpdateDatafeedApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_update'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.updateFilter = function mlUpdateFilterApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.filter_id == null && params.filterId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, filterId, filter_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId) + '/' + '_update'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.updateJob = function mlUpdateJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_update'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.updateModelSnapshot = function mlUpdateModelSnapshotApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n  if (params.snapshot_id == null && params.snapshotId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_update'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.upgradeJobSnapshot = function mlUpgradeJobSnapshotApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\n    return handleError(err, callback)\n  }\n  if (params.snapshot_id == null && params.snapshotId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_upgrade'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.validate = function mlValidateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_validate'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nMlApi.prototype.validateDetector = function mlValidateDetectorApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_validate' + '/' + 'detector'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(MlApi.prototype, {\n  close_job: { get () { return this.closeJob } },\n  delete_calendar: { get () { return this.deleteCalendar } },\n  delete_calendar_event: { get () { return this.deleteCalendarEvent } },\n  delete_calendar_job: { get () { return this.deleteCalendarJob } },\n  delete_data_frame_analytics: { get () { return this.deleteDataFrameAnalytics } },\n  delete_datafeed: { get () { return this.deleteDatafeed } },\n  delete_expired_data: { get () { return this.deleteExpiredData } },\n  delete_filter: { get () { return this.deleteFilter } },\n  delete_forecast: { get () { return this.deleteForecast } },\n  delete_job: { get () { return this.deleteJob } },\n  delete_model_snapshot: { get () { return this.deleteModelSnapshot } },\n  delete_trained_model: { get () { return this.deleteTrainedModel } },\n  delete_trained_model_alias: { get () { return this.deleteTrainedModelAlias } },\n  estimate_model_memory: { get () { return this.estimateModelMemory } },\n  evaluate_data_frame: { get () { return this.evaluateDataFrame } },\n  explain_data_frame_analytics: { get () { return this.explainDataFrameAnalytics } },\n  find_file_structure: { get () { return this.findFileStructure } },\n  flush_job: { get () { return this.flushJob } },\n  get_buckets: { get () { return this.getBuckets } },\n  get_calendar_events: { get () { return this.getCalendarEvents } },\n  get_calendars: { get () { return this.getCalendars } },\n  get_categories: { get () { return this.getCategories } },\n  get_data_frame_analytics: { get () { return this.getDataFrameAnalytics } },\n  get_data_frame_analytics_stats: { get () { return this.getDataFrameAnalyticsStats } },\n  get_datafeed_stats: { get () { return this.getDatafeedStats } },\n  get_datafeeds: { get () { return this.getDatafeeds } },\n  get_filters: { get () { return this.getFilters } },\n  get_influencers: { get () { return this.getInfluencers } },\n  get_job_stats: { get () { return this.getJobStats } },\n  get_jobs: { get () { return this.getJobs } },\n  get_model_snapshots: { get () { return this.getModelSnapshots } },\n  get_overall_buckets: { get () { return this.getOverallBuckets } },\n  get_records: { get () { return this.getRecords } },\n  get_trained_models: { get () { return this.getTrainedModels } },\n  get_trained_models_stats: { get () { return this.getTrainedModelsStats } },\n  open_job: { get () { return this.openJob } },\n  post_calendar_events: { get () { return this.postCalendarEvents } },\n  post_data: { get () { return this.postData } },\n  preview_data_frame_analytics: { get () { return this.previewDataFrameAnalytics } },\n  preview_datafeed: { get () { return this.previewDatafeed } },\n  put_calendar: { get () { return this.putCalendar } },\n  put_calendar_job: { get () { return this.putCalendarJob } },\n  put_data_frame_analytics: { get () { return this.putDataFrameAnalytics } },\n  put_datafeed: { get () { return this.putDatafeed } },\n  put_filter: { get () { return this.putFilter } },\n  put_job: { get () { return this.putJob } },\n  put_trained_model: { get () { return this.putTrainedModel } },\n  put_trained_model_alias: { get () { return this.putTrainedModelAlias } },\n  reset_job: { get () { return this.resetJob } },\n  revert_model_snapshot: { get () { return this.revertModelSnapshot } },\n  set_upgrade_mode: { get () { return this.setUpgradeMode } },\n  start_data_frame_analytics: { get () { return this.startDataFrameAnalytics } },\n  start_datafeed: { get () { return this.startDatafeed } },\n  stop_data_frame_analytics: { get () { return this.stopDataFrameAnalytics } },\n  stop_datafeed: { get () { return this.stopDatafeed } },\n  update_data_frame_analytics: { get () { return this.updateDataFrameAnalytics } },\n  update_datafeed: { get () { return this.updateDatafeed } },\n  update_filter: { get () { return this.updateFilter } },\n  update_job: { get () { return this.updateJob } },\n  update_model_snapshot: { get () { return this.updateModelSnapshot } },\n  upgrade_job_snapshot: { get () { return this.upgradeJobSnapshot } },\n  validate_detector: { get () { return this.validateDetector } }\n})\n\nmodule.exports = MlApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['system_id', 'system_api_version', 'interval', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { systemId: 'system_id', systemApiVersion: 'system_api_version', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction MonitoringApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nMonitoringApi.prototype.bulk = function monitoringBulkApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((type) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + '_monitoring' + '/' + encodeURIComponent(type) + '/' + 'bulk'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_monitoring' + '/' + 'bulk'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = MonitoringApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['search_type', 'max_concurrent_searches', 'typed_keys', 'pre_filter_shard_size', 'max_concurrent_shard_requests', 'rest_total_hits_as_int', 'ccs_minimize_roundtrips', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { searchType: 'search_type', maxConcurrentSearches: 'max_concurrent_searches', typedKeys: 'typed_keys', preFilterShardSize: 'pre_filter_shard_size', maxConcurrentShardRequests: 'max_concurrent_shard_requests', restTotalHitsAsInt: 'rest_total_hits_as_int', ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction msearchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_msearch'\n  } else if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_msearch'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_msearch'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = msearchApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['search_type', 'typed_keys', 'max_concurrent_searches', 'rest_total_hits_as_int', 'ccs_minimize_roundtrips', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { searchType: 'search_type', typedKeys: 'typed_keys', maxConcurrentSearches: 'max_concurrent_searches', restTotalHitsAsInt: 'rest_total_hits_as_int', ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction msearchTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_msearch' + '/' + 'template'\n  } else if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_msearch' + '/' + 'template'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_msearch' + '/' + 'template'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = msearchTemplateApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['ids', 'term_statistics', 'field_statistics', 'fields', 'offsets', 'positions', 'payloads', 'preference', 'routing', 'realtime', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { termStatistics: 'term_statistics', fieldStatistics: 'field_statistics', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction mtermvectorsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mtermvectors'\n  } else if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_mtermvectors'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_mtermvectors'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = mtermvectorsApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'interval', 'snapshots', 'threads', 'ignore_idle_threads', 'type', 'timeout', 'flat_settings', 'completion_fields', 'fielddata_fields', 'fields', 'groups', 'level', 'types', 'include_segment_file_sizes', 'include_unloaded_segments']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', ignoreIdleThreads: 'ignore_idle_threads', flatSettings: 'flat_settings', completionFields: 'completion_fields', fielddataFields: 'fielddata_fields', includeSegmentFileSizes: 'include_segment_file_sizes', includeUnloadedSegments: 'include_unloaded_segments' }\n\nfunction NodesApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nNodesApi.prototype.clearRepositoriesMeteringArchive = function nodesClearRepositoriesMeteringArchiveApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.node_id == null && params.nodeId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: node_id or nodeId')\n    return handleError(err, callback)\n  }\n  if (params.max_archive_version == null && params.maxArchiveVersion == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: max_archive_version or maxArchiveVersion')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.max_archive_version != null || params.maxArchiveVersion != null) && ((params.node_id == null && params.nodeId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: node_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, nodeId, node_id, maxArchiveVersion, max_archive_version, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + '_repositories_metering' + '/' + encodeURIComponent(max_archive_version || maxArchiveVersion)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nNodesApi.prototype.getRepositoriesMeteringInfo = function nodesGetRepositoriesMeteringInfoApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.node_id == null && params.nodeId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: node_id or nodeId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + '_repositories_metering'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nNodesApi.prototype.hotThreads = function nodesHotThreadsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hot_threads'\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hotthreads'\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hotthreads'\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_cluster' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hot_threads'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + 'hot_threads'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nNodesApi.prototype.info = function nodesInfoApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, metric, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null && (metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + encodeURIComponent(metric)\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId)\n  } else if ((metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(metric)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nNodesApi.prototype.reloadSecureSettings = function nodesReloadSecureSettingsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'reload_secure_settings'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_nodes' + '/' + 'reload_secure_settings'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nNodesApi.prototype.stats = function nodesStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, metric, indexMetric, index_metric, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null && (metric) != null && (index_metric || indexMetric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index_metric || indexMetric)\n  } else if ((node_id || nodeId) != null && (metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats' + '/' + encodeURIComponent(metric)\n  } else if ((metric) != null && (index_metric || indexMetric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + 'stats' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index_metric || indexMetric)\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats'\n  } else if ((metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + 'stats' + '/' + encodeURIComponent(metric)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + 'stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nNodesApi.prototype.usage = function nodesUsageApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, metric, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null && (metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'usage' + '/' + encodeURIComponent(metric)\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'usage'\n  } else if ((metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + 'usage' + '/' + encodeURIComponent(metric)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + 'usage'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(NodesApi.prototype, {\n  clear_repositories_metering_archive: { get () { return this.clearRepositoriesMeteringArchive } },\n  get_repositories_metering_info: { get () { return this.getRepositoriesMeteringInfo } },\n  hot_threads: { get () { return this.hotThreads } },\n  reload_secure_settings: { get () { return this.reloadSecureSettings } }\n})\n\nmodule.exports = NodesApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['preference', 'routing', 'ignore_unavailable', 'expand_wildcards', 'keep_alive', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { ignoreUnavailable: 'ignore_unavailable', expandWildcards: 'expand_wildcards', keepAlive: 'keep_alive', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction openPointInTimeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_pit'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = openPointInTimeApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction pingApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'HEAD'\n  path = '/'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = pingApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['timeout', 'master_timeout', 'context', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction putScriptApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.context != null && (params.id == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, context, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null && (context) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + '_scripts' + '/' + encodeURIComponent(id) + '/' + encodeURIComponent(context)\n  } else {\n    if (method == null) method = 'PUT'\n    path = '/' + '_scripts' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = putScriptApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'search_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction rankEvalApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_rank_eval'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_rank_eval'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = rankEvalApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['refresh', 'timeout', 'wait_for_active_shards', 'wait_for_completion', 'requests_per_second', 'scroll', 'slices', 'max_docs', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { waitForActiveShards: 'wait_for_active_shards', waitForCompletion: 'wait_for_completion', requestsPerSecond: 'requests_per_second', maxDocs: 'max_docs', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction reindexApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_reindex'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = reindexApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['requests_per_second', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { requestsPerSecond: 'requests_per_second', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction reindexRethrottleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.task_id == null && params.taskId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId')\n    return handleError(err, callback)\n  }\n  if (params.requests_per_second == null && params.requestsPerSecond == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: requests_per_second or requestsPerSecond')\n    return handleError(err, callback)\n  }\n\n  let { method, body, taskId, task_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_reindex' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_rethrottle'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = reindexRethrottleApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction renderSearchTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_render' + '/' + 'template' + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_render' + '/' + 'template'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = renderSearchTemplateApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'typed_keys', 'rest_total_hits_as_int', 'wait_for_completion', 'timeout']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', typedKeys: 'typed_keys', restTotalHitsAsInt: 'rest_total_hits_as_int', waitForCompletion: 'wait_for_completion' }\n\nfunction RollupApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nRollupApi.prototype.deleteJob = function rollupDeleteJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_rollup' + '/' + 'job' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nRollupApi.prototype.getJobs = function rollupGetJobsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_rollup' + '/' + 'job' + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_rollup' + '/' + 'job'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nRollupApi.prototype.getRollupCaps = function rollupGetRollupCapsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_rollup' + '/' + 'data' + '/' + encodeURIComponent(id)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_rollup' + '/' + 'data'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nRollupApi.prototype.getRollupIndexCaps = function rollupGetRollupIndexCapsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + encodeURIComponent(index) + '/' + '_rollup' + '/' + 'data'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nRollupApi.prototype.putJob = function rollupPutJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_rollup' + '/' + 'job' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nRollupApi.prototype.rollup = function rollupRollupApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.rollup_index == null && params.rollupIndex == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: rollup_index or rollupIndex')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.rollup_index != null || params.rollupIndex != null) && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, rollupIndex, rollup_index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_rollup' + '/' + encodeURIComponent(rollup_index || rollupIndex)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nRollupApi.prototype.rollupSearch = function rollupRollupSearchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_rollup_search'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_rollup_search'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nRollupApi.prototype.startJob = function rollupStartJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_rollup' + '/' + 'job' + '/' + encodeURIComponent(id) + '/' + '_start'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nRollupApi.prototype.stopJob = function rollupStopJobApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_rollup' + '/' + 'job' + '/' + encodeURIComponent(id) + '/' + '_stop'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(RollupApi.prototype, {\n  delete_job: { get () { return this.deleteJob } },\n  get_jobs: { get () { return this.getJobs } },\n  get_rollup_caps: { get () { return this.getRollupCaps } },\n  get_rollup_index_caps: { get () { return this.getRollupIndexCaps } },\n  put_job: { get () { return this.putJob } },\n  rollup_search: { get () { return this.rollupSearch } },\n  start_job: { get () { return this.startJob } },\n  stop_job: { get () { return this.stopJob } }\n})\n\nmodule.exports = RollupApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction scriptsPainlessExecuteApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_scripts' + '/' + 'painless' + '/' + '_execute'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = scriptsPainlessExecuteApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['scroll', 'scroll_id', 'rest_total_hits_as_int', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { scrollId: 'scroll_id', restTotalHitsAsInt: 'rest_total_hits_as_int', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction scrollApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, scrollId, scroll_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((scroll_id || scrollId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_search' + '/' + 'scroll' + '/' + encodeURIComponent(scroll_id || scrollId)\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_search' + '/' + 'scroll'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = scrollApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'ccs_minimize_roundtrips', 'default_operator', 'df', 'explain', 'stored_fields', 'docvalue_fields', 'from', 'ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'lenient', 'preference', 'q', 'routing', 'scroll', 'search_type', 'size', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'suggest_field', 'suggest_mode', 'suggest_size', 'suggest_text', 'timeout', 'track_scores', 'track_total_hits', 'allow_partial_search_results', 'typed_keys', 'version', 'seq_no_primary_term', 'request_cache', 'batched_reduce_size', 'max_concurrent_shard_requests', 'pre_filter_shard_size', 'rest_total_hits_as_int', 'min_compatible_shard_node', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { analyzeWildcard: 'analyze_wildcard', ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips', defaultOperator: 'default_operator', storedFields: 'stored_fields', docvalueFields: 'docvalue_fields', ignoreUnavailable: 'ignore_unavailable', ignoreThrottled: 'ignore_throttled', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', terminateAfter: 'terminate_after', suggestField: 'suggest_field', suggestMode: 'suggest_mode', suggestSize: 'suggest_size', suggestText: 'suggest_text', trackScores: 'track_scores', trackTotalHits: 'track_total_hits', allowPartialSearchResults: 'allow_partial_search_results', typedKeys: 'typed_keys', seqNoPrimaryTerm: 'seq_no_primary_term', requestCache: 'request_cache', batchedReduceSize: 'batched_reduce_size', maxConcurrentShardRequests: 'max_concurrent_shard_requests', preFilterShardSize: 'pre_filter_shard_size', restTotalHitsAsInt: 'rest_total_hits_as_int', minCompatibleShardNode: 'min_compatible_shard_node', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction searchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_search'\n  } else if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_search'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_search'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = searchApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['exact_bounds', 'extent', 'grid_precision', 'grid_type', 'size', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { exactBounds: 'exact_bounds', gridPrecision: 'grid_precision', gridType: 'grid_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction searchMvtApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.field == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: field')\n    return handleError(err, callback)\n  }\n  if (params.zoom == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: zoom')\n    return handleError(err, callback)\n  }\n  if (params.x == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: x')\n    return handleError(err, callback)\n  }\n  if (params.y == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: y')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.y != null && (params.x == null || params.zoom == null || params.field == null || params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: x, zoom, field, index')\n    return handleError(err, callback)\n  } else if (params.x != null && (params.zoom == null || params.field == null || params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: zoom, field, index')\n    return handleError(err, callback)\n  } else if (params.zoom != null && (params.field == null || params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: field, index')\n    return handleError(err, callback)\n  } else if (params.field != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, field, zoom, x, y, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_mvt' + '/' + encodeURIComponent(field) + '/' + encodeURIComponent(zoom) + '/' + encodeURIComponent(x) + '/' + encodeURIComponent(y)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = searchMvtApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['preference', 'routing', 'local', 'ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction searchShardsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_search_shards'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_search_shards'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = searchShardsApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'preference', 'routing', 'scroll', 'search_type', 'explain', 'profile', 'typed_keys', 'rest_total_hits_as_int', 'ccs_minimize_roundtrips', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { ignoreUnavailable: 'ignore_unavailable', ignoreThrottled: 'ignore_throttled', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', typedKeys: 'typed_keys', restTotalHitsAsInt: 'rest_total_hits_as_int', ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction searchTemplateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_search' + '/' + 'template'\n  } else if ((index) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_search' + '/' + 'template'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_search' + '/' + 'template'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = searchTemplateApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'index', 'master_timeout', 'wait_for_completion', 'storage', 'level']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', masterTimeout: 'master_timeout', waitForCompletion: 'wait_for_completion' }\n\nfunction SearchableSnapshotsApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nSearchableSnapshotsApi.prototype.cacheStats = function searchableSnapshotsCacheStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_searchable_snapshots' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'cache' + '/' + 'stats'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSearchableSnapshotsApi.prototype.clearCache = function searchableSnapshotsClearCacheApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'clear'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'clear'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSearchableSnapshotsApi.prototype.mount = function searchableSnapshotsMountApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.snapshot != null && (params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_mount'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSearchableSnapshotsApi.prototype.repositoryStats = function searchableSnapshotsRepositoryStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_stats'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSearchableSnapshotsApi.prototype.stats = function searchableSnapshotsStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + encodeURIComponent(index) + '/' + '_searchable_snapshots' + '/' + 'stats'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_searchable_snapshots' + '/' + 'stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(SearchableSnapshotsApi.prototype, {\n  cache_stats: { get () { return this.cacheStats } },\n  clear_cache: { get () { return this.clearCache } },\n  repository_stats: { get () { return this.repositoryStats } }\n})\n\nmodule.exports = SearchableSnapshotsApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'refresh', 'usernames', 'id', 'name', 'username', 'realm_name', 'owner']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', realmName: 'realm_name' }\n\nfunction SecurityApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nSecurityApi.prototype.authenticate = function securityAuthenticateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_security' + '/' + '_authenticate'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.changePassword = function securityChangePasswordApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, username, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((username) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_password'\n  } else {\n    if (method == null) method = 'PUT'\n    path = '/' + '_security' + '/' + 'user' + '/' + '_password'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.clearApiKeyCache = function securityClearApiKeyCacheApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.ids == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: ids')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ids, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'api_key' + '/' + encodeURIComponent(ids) + '/' + '_clear_cache'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.clearCachedPrivileges = function securityClearCachedPrivilegesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.application == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: application')\n    return handleError(err, callback)\n  }\n\n  let { method, body, application, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + '_clear_cache'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.clearCachedRealms = function securityClearCachedRealmsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.realms == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: realms')\n    return handleError(err, callback)\n  }\n\n  let { method, body, realms, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'realm' + '/' + encodeURIComponent(realms) + '/' + '_clear_cache'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.clearCachedRoles = function securityClearCachedRolesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name) + '/' + '_clear_cache'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.clearCachedServiceTokens = function securityClearCachedServiceTokensApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: namespace')\n    return handleError(err, callback)\n  }\n  if (params.service == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: service')\n    return handleError(err, callback)\n  }\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.name != null && (params.service == null || params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace')\n    return handleError(err, callback)\n  } else if (params.service != null && (params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\n    return handleError(err, callback)\n  }\n\n  let { method, body, namespace, service, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name) + '/' + '_clear_cache'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.createApiKey = function securityCreateApiKeyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_security' + '/' + 'api_key'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.createServiceToken = function securityCreateServiceTokenApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: namespace')\n    return handleError(err, callback)\n  }\n  if (params.service == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: service')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.name != null && (params.service == null || params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace')\n    return handleError(err, callback)\n  } else if (params.service != null && (params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\n    return handleError(err, callback)\n  }\n\n  let { method, body, namespace, service, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((namespace) != null && (service) != null && (name) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.deletePrivileges = function securityDeletePrivilegesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.application == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: application')\n    return handleError(err, callback)\n  }\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.name != null && (params.application == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: application')\n    return handleError(err, callback)\n  }\n\n  let { method, body, application, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.deleteRole = function securityDeleteRoleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.deleteRoleMapping = function securityDeleteRoleMappingApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.deleteServiceToken = function securityDeleteServiceTokenApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: namespace')\n    return handleError(err, callback)\n  }\n  if (params.service == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: service')\n    return handleError(err, callback)\n  }\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.name != null && (params.service == null || params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace')\n    return handleError(err, callback)\n  } else if (params.service != null && (params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\n    return handleError(err, callback)\n  }\n\n  let { method, body, namespace, service, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.deleteUser = function securityDeleteUserApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username')\n    return handleError(err, callback)\n  }\n\n  let { method, body, username, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.disableUser = function securityDisableUserApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username')\n    return handleError(err, callback)\n  }\n\n  let { method, body, username, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_disable'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.enableUser = function securityEnableUserApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username')\n    return handleError(err, callback)\n  }\n\n  let { method, body, username, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_enable'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getApiKey = function securityGetApiKeyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_security' + '/' + 'api_key'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getBuiltinPrivileges = function securityGetBuiltinPrivilegesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_security' + '/' + 'privilege' + '/' + '_builtin'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getPrivileges = function securityGetPrivilegesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required url components\n  if (params.name != null && (params.application == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: application')\n    return handleError(err, callback)\n  }\n\n  let { method, body, application, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((application) != null && (name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + encodeURIComponent(name)\n  } else if ((application) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'privilege'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getRole = function securityGetRoleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'role'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getRoleMapping = function securityGetRoleMappingApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((name) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'role_mapping'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getServiceAccounts = function securityGetServiceAccountsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required url components\n  if (params.service != null && (params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\n    return handleError(err, callback)\n  }\n\n  let { method, body, namespace, service, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((namespace) != null && (service) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service)\n  } else if ((namespace) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'service'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getServiceCredentials = function securityGetServiceCredentialsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: namespace')\n    return handleError(err, callback)\n  }\n  if (params.service == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: service')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.service != null && (params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\n    return handleError(err, callback)\n  }\n\n  let { method, body, namespace, service, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getToken = function securityGetTokenApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'oauth2' + '/' + 'token'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getUser = function securityGetUserApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, username, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((username) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_security' + '/' + 'user'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.getUserPrivileges = function securityGetUserPrivilegesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_security' + '/' + 'user' + '/' + '_privileges'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.grantApiKey = function securityGrantApiKeyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'api_key' + '/' + 'grant'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.hasPrivileges = function securityHasPrivilegesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, user, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((user) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(user) + '/' + '_has_privileges'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + '_security' + '/' + 'user' + '/' + '_has_privileges'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.invalidateApiKey = function securityInvalidateApiKeyApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_security' + '/' + 'api_key'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.invalidateToken = function securityInvalidateTokenApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_security' + '/' + 'oauth2' + '/' + 'token'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.putPrivileges = function securityPutPrivilegesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_security' + '/' + 'privilege'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.putRole = function securityPutRoleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.putRoleMapping = function securityPutRoleMappingApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.putUser = function securityPutUserApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, username, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.queryApiKeys = function securityQueryApiKeysApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_security' + '/' + '_query' + '/' + 'api_key'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.samlAuthenticate = function securitySamlAuthenticateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'saml' + '/' + 'authenticate'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.samlCompleteLogout = function securitySamlCompleteLogoutApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'saml' + '/' + 'complete_logout'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.samlInvalidate = function securitySamlInvalidateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'saml' + '/' + 'invalidate'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.samlLogout = function securitySamlLogoutApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'saml' + '/' + 'logout'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.samlPrepareAuthentication = function securitySamlPrepareAuthenticationApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_security' + '/' + 'saml' + '/' + 'prepare'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSecurityApi.prototype.samlServiceProviderMetadata = function securitySamlServiceProviderMetadataApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.realm_name == null && params.realmName == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: realm_name or realmName')\n    return handleError(err, callback)\n  }\n\n  let { method, body, realmName, realm_name, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_security' + '/' + 'saml' + '/' + 'metadata' + '/' + encodeURIComponent(realm_name || realmName)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(SecurityApi.prototype, {\n  change_password: { get () { return this.changePassword } },\n  clear_api_key_cache: { get () { return this.clearApiKeyCache } },\n  clear_cached_privileges: { get () { return this.clearCachedPrivileges } },\n  clear_cached_realms: { get () { return this.clearCachedRealms } },\n  clear_cached_roles: { get () { return this.clearCachedRoles } },\n  clear_cached_service_tokens: { get () { return this.clearCachedServiceTokens } },\n  create_api_key: { get () { return this.createApiKey } },\n  create_service_token: { get () { return this.createServiceToken } },\n  delete_privileges: { get () { return this.deletePrivileges } },\n  delete_role: { get () { return this.deleteRole } },\n  delete_role_mapping: { get () { return this.deleteRoleMapping } },\n  delete_service_token: { get () { return this.deleteServiceToken } },\n  delete_user: { get () { return this.deleteUser } },\n  disable_user: { get () { return this.disableUser } },\n  enable_user: { get () { return this.enableUser } },\n  get_api_key: { get () { return this.getApiKey } },\n  get_builtin_privileges: { get () { return this.getBuiltinPrivileges } },\n  get_privileges: { get () { return this.getPrivileges } },\n  get_role: { get () { return this.getRole } },\n  get_role_mapping: { get () { return this.getRoleMapping } },\n  get_service_accounts: { get () { return this.getServiceAccounts } },\n  get_service_credentials: { get () { return this.getServiceCredentials } },\n  get_token: { get () { return this.getToken } },\n  get_user: { get () { return this.getUser } },\n  get_user_privileges: { get () { return this.getUserPrivileges } },\n  grant_api_key: { get () { return this.grantApiKey } },\n  has_privileges: { get () { return this.hasPrivileges } },\n  invalidate_api_key: { get () { return this.invalidateApiKey } },\n  invalidate_token: { get () { return this.invalidateToken } },\n  put_privileges: { get () { return this.putPrivileges } },\n  put_role: { get () { return this.putRole } },\n  put_role_mapping: { get () { return this.putRoleMapping } },\n  put_user: { get () { return this.putUser } },\n  query_api_keys: { get () { return this.queryApiKeys } },\n  saml_authenticate: { get () { return this.samlAuthenticate } },\n  saml_complete_logout: { get () { return this.samlCompleteLogout } },\n  saml_invalidate: { get () { return this.samlInvalidate } },\n  saml_logout: { get () { return this.samlLogout } },\n  saml_prepare_authentication: { get () { return this.samlPrepareAuthentication } },\n  saml_service_provider_metadata: { get () { return this.samlServiceProviderMetadata } }\n})\n\nmodule.exports = SecurityApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction ShutdownApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nShutdownApi.prototype.deleteNode = function shutdownDeleteNodeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.node_id == null && params.nodeId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: node_id or nodeId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'shutdown'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nShutdownApi.prototype.getNode = function shutdownGetNodeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'shutdown'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_nodes' + '/' + 'shutdown'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nShutdownApi.prototype.putNode = function shutdownPutNodeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.node_id == null && params.nodeId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: node_id or nodeId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, nodeId, node_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'shutdown'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(ShutdownApi.prototype, {\n  delete_node: { get () { return this.deleteNode } },\n  get_node: { get () { return this.getNode } },\n  put_node: { get () { return this.putNode } }\n})\n\nmodule.exports = ShutdownApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction SlmApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nSlmApi.prototype.deleteLifecycle = function slmDeleteLifecycleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.policy_id == null && params.policyId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, policyId, policy_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSlmApi.prototype.executeLifecycle = function slmExecuteLifecycleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.policy_id == null && params.policyId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, policyId, policy_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId) + '/' + '_execute'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSlmApi.prototype.executeRetention = function slmExecuteRetentionApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_slm' + '/' + '_execute_retention'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSlmApi.prototype.getLifecycle = function slmGetLifecycleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, policyId, policy_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((policy_id || policyId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_slm' + '/' + 'policy'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSlmApi.prototype.getStats = function slmGetStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_slm' + '/' + 'stats'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSlmApi.prototype.getStatus = function slmGetStatusApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_slm' + '/' + 'status'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSlmApi.prototype.putLifecycle = function slmPutLifecycleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.policy_id == null && params.policyId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, policyId, policy_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSlmApi.prototype.start = function slmStartApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_slm' + '/' + 'start'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSlmApi.prototype.stop = function slmStopApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_slm' + '/' + 'stop'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(SlmApi.prototype, {\n  delete_lifecycle: { get () { return this.deleteLifecycle } },\n  execute_lifecycle: { get () { return this.executeLifecycle } },\n  execute_retention: { get () { return this.executeRetention } },\n  get_lifecycle: { get () { return this.getLifecycle } },\n  get_stats: { get () { return this.getStats } },\n  get_status: { get () { return this.getStatus } },\n  put_lifecycle: { get () { return this.putLifecycle } }\n})\n\nmodule.exports = SlmApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['master_timeout', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion', 'verify', 'ignore_unavailable', 'index_details', 'include_repository', 'verbose', 'local', 'blob_count', 'concurrency', 'read_node_count', 'early_read_node_count', 'seed', 'rare_action_probability', 'max_blob_size', 'max_total_data_size', 'detailed', 'rarely_abort_writes']\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path', waitForCompletion: 'wait_for_completion', ignoreUnavailable: 'ignore_unavailable', indexDetails: 'index_details', includeRepository: 'include_repository', blobCount: 'blob_count', readNodeCount: 'read_node_count', earlyReadNodeCount: 'early_read_node_count', rareActionProbability: 'rare_action_probability', maxBlobSize: 'max_blob_size', maxTotalDataSize: 'max_total_data_size', rarelyAbortWrites: 'rarely_abort_writes' }\n\nfunction SnapshotApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nSnapshotApi.prototype.cleanupRepository = function snapshotCleanupRepositoryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_cleanup'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.clone = function snapshotCloneApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\n    return handleError(err, callback)\n  }\n  if (params.target_snapshot == null && params.targetSnapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target_snapshot or targetSnapshot')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.target_snapshot != null || params.targetSnapshot != null) && (params.snapshot == null || params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: snapshot, repository')\n    return handleError(err, callback)\n  } else if (params.snapshot != null && (params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, snapshot, targetSnapshot, target_snapshot, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_clone' + '/' + encodeURIComponent(target_snapshot || targetSnapshot)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.create = function snapshotCreateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.snapshot != null && (params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.createRepository = function snapshotCreateRepositoryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.delete = function snapshotDeleteApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.snapshot != null && (params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.deleteRepository = function snapshotDeleteRepositoryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.get = function snapshotGetApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.snapshot != null && (params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.getRepository = function snapshotGetRepositoryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, repository, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((repository) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_snapshot'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.repositoryAnalyze = function snapshotRepositoryAnalyzeApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_analyze'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.restore = function snapshotRestoreApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.snapshot != null && (params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_restore'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.status = function snapshotStatusApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required url components\n  if (params.snapshot != null && (params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((repository) != null && (snapshot) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_status'\n  } else if ((repository) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_status'\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_snapshot' + '/' + '_status'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSnapshotApi.prototype.verifyRepository = function snapshotVerifyRepositoryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\n    return handleError(err, callback)\n  }\n\n  let { method, body, repository, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_verify'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(SnapshotApi.prototype, {\n  cleanup_repository: { get () { return this.cleanupRepository } },\n  create_repository: { get () { return this.createRepository } },\n  delete_repository: { get () { return this.deleteRepository } },\n  get_repository: { get () { return this.getRepository } },\n  repository_analyze: { get () { return this.repositoryAnalyze } },\n  verify_repository: { get () { return this.verifyRepository } }\n})\n\nmodule.exports = SnapshotApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'delimiter', 'format', 'keep_alive', 'wait_for_completion_timeout']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', keepAlive: 'keep_alive', waitForCompletionTimeout: 'wait_for_completion_timeout' }\n\nfunction SqlApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nSqlApi.prototype.clearCursor = function sqlClearCursorApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_sql' + '/' + 'close'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSqlApi.prototype.deleteAsync = function sqlDeleteAsyncApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_sql' + '/' + 'async' + '/' + 'delete' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSqlApi.prototype.getAsync = function sqlGetAsyncApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_sql' + '/' + 'async' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSqlApi.prototype.getAsyncStatus = function sqlGetAsyncStatusApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_sql' + '/' + 'async' + '/' + 'status' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSqlApi.prototype.query = function sqlQueryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_sql'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nSqlApi.prototype.translate = function sqlTranslateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_sql' + '/' + 'translate'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(SqlApi.prototype, {\n  clear_cursor: { get () { return this.clearCursor } },\n  delete_async: { get () { return this.deleteAsync } },\n  get_async: { get () { return this.getAsync } },\n  get_async_status: { get () { return this.getAsyncStatus } }\n})\n\nmodule.exports = SqlApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction SslApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nSslApi.prototype.certificates = function sslCertificatesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_ssl' + '/' + 'certificates'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = SslApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['nodes', 'actions', 'parent_task_id', 'wait_for_completion', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'timeout', 'detailed', 'group_by']\nconst snakeCase = { parentTaskId: 'parent_task_id', waitForCompletion: 'wait_for_completion', errorTrace: 'error_trace', filterPath: 'filter_path', groupBy: 'group_by' }\n\nfunction TasksApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nTasksApi.prototype.cancel = function tasksCancelApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, taskId, task_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((task_id || taskId) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_cancel'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + '_tasks' + '/' + '_cancel'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTasksApi.prototype.get = function tasksGetApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.task_id == null && params.taskId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, taskId, task_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTasksApi.prototype.list = function tasksListApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_tasks'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = TasksApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction termsEnumApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + encodeURIComponent(index) + '/' + '_terms_enum'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = termsEnumApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['term_statistics', 'field_statistics', 'fields', 'offsets', 'positions', 'payloads', 'preference', 'routing', 'realtime', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { termStatistics: 'term_statistics', fieldStatistics: 'field_statistics', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction termvectorsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, id, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_termvectors'\n  } else if ((index) != null && (id) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors' + '/' + encodeURIComponent(id)\n  } else if ((index) != null && (type) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_termvectors'\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = termvectorsApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['lines_to_sample', 'line_merge_size_limit', 'timeout', 'charset', 'format', 'has_header_row', 'column_names', 'delimiter', 'quote', 'should_trim_fields', 'grok_pattern', 'timestamp_field', 'timestamp_format', 'explain', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { linesToSample: 'lines_to_sample', lineMergeSizeLimit: 'line_merge_size_limit', hasHeaderRow: 'has_header_row', columnNames: 'column_names', shouldTrimFields: 'should_trim_fields', grokPattern: 'grok_pattern', timestampField: 'timestamp_field', timestampFormat: 'timestamp_format', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction TextStructureApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nTextStructureApi.prototype.findStructure = function textStructureFindStructureApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_text_structure' + '/' + 'find_structure'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(TextStructureApi.prototype, {\n  find_structure: { get () { return this.findStructure } }\n})\n\nmodule.exports = TextStructureApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['force', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'from', 'size', 'allow_no_match', 'exclude_generated', 'defer_validation', 'timeout', 'wait_for_completion', 'wait_for_checkpoint']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', allowNoMatch: 'allow_no_match', excludeGenerated: 'exclude_generated', deferValidation: 'defer_validation', waitForCompletion: 'wait_for_completion', waitForCheckpoint: 'wait_for_checkpoint' }\n\nfunction TransformApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nTransformApi.prototype.deleteTransform = function transformDeleteTransformApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, transformId, transform_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTransformApi.prototype.getTransform = function transformGetTransformApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, transformId, transform_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((transform_id || transformId) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_transform'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTransformApi.prototype.getTransformStats = function transformGetTransformStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, transformId, transform_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_stats'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTransformApi.prototype.previewTransform = function transformPreviewTransformApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_transform' + '/' + '_preview'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTransformApi.prototype.putTransform = function transformPutTransformApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, transformId, transform_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTransformApi.prototype.startTransform = function transformStartTransformApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, transformId, transform_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_start'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTransformApi.prototype.stopTransform = function transformStopTransformApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, transformId, transform_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_stop'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nTransformApi.prototype.updateTransform = function transformUpdateTransformApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, transformId, transform_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_update'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(TransformApi.prototype, {\n  delete_transform: { get () { return this.deleteTransform } },\n  get_transform: { get () { return this.getTransform } },\n  get_transform_stats: { get () { return this.getTransformStats } },\n  preview_transform: { get () { return this.previewTransform } },\n  put_transform: { get () { return this.putTransform } },\n  start_transform: { get () { return this.startTransform } },\n  stop_transform: { get () { return this.stopTransform } },\n  update_transform: { get () { return this.updateTransform } }\n})\n\nmodule.exports = TransformApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['wait_for_active_shards', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'lang', 'refresh', 'retry_on_conflict', 'routing', 'timeout', 'if_seq_no', 'if_primary_term', 'require_alias', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { waitForActiveShards: 'wait_for_active_shards', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', retryOnConflict: 'retry_on_conflict', ifSeqNo: 'if_seq_no', ifPrimaryTerm: 'if_primary_term', requireAlias: 'require_alias', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction updateApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null && (id) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_update'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_update' + '/' + encodeURIComponent(id)\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = updateApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'default_operator', 'df', 'from', 'ignore_unavailable', 'allow_no_indices', 'conflicts', 'expand_wildcards', 'lenient', 'pipeline', 'preference', 'q', 'routing', 'scroll', 'search_type', 'search_timeout', 'size', 'max_docs', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'version', 'version_type', 'request_cache', 'refresh', 'timeout', 'wait_for_active_shards', 'scroll_size', 'wait_for_completion', 'requests_per_second', 'slices', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', searchTimeout: 'search_timeout', maxDocs: 'max_docs', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', terminateAfter: 'terminate_after', versionType: 'version_type', requestCache: 'request_cache', waitForActiveShards: 'wait_for_active_shards', scrollSize: 'scroll_size', waitForCompletion: 'wait_for_completion', requestsPerSecond: 'requests_per_second', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction updateByQueryApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if (params.type != null && (params.index == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\n    return handleError(err, callback)\n  }\n\n  let { method, body, index, type, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((index) != null && (type) != null) {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_update_by_query'\n  } else {\n    if (method == null) method = 'POST'\n    path = '/' + encodeURIComponent(index) + '/' + '_update_by_query'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = updateByQueryApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['requests_per_second', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\nconst snakeCase = { requestsPerSecond: 'requests_per_second', errorTrace: 'error_trace', filterPath: 'filter_path' }\n\nfunction updateByQueryRethrottleApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.task_id == null && params.taskId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId')\n    return handleError(err, callback)\n  }\n  if (params.requests_per_second == null && params.requestsPerSecond == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: requests_per_second or requestsPerSecond')\n    return handleError(err, callback)\n  }\n\n  let { method, body, taskId, task_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_update_by_query' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_rethrottle'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = updateByQueryRethrottleApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'debug', 'active', 'version', 'if_seq_no', 'if_primary_term', 'metric', 'emit_stacktraces']\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', ifSeqNo: 'if_seq_no', ifPrimaryTerm: 'if_primary_term', emitStacktraces: 'emit_stacktraces' }\n\nfunction WatcherApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nWatcherApi.prototype.ackWatch = function watcherAckWatchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.watch_id == null && params.watchId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: watch_id or watchId')\n    return handleError(err, callback)\n  }\n\n  // check required url components\n  if ((params.action_id != null || params.actionId != null) && ((params.watch_id == null && params.watchId == null))) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: watch_id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, watchId, watch_id, actionId, action_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((watch_id || watchId) != null && (action_id || actionId) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(watch_id || watchId) + '/' + '_ack' + '/' + encodeURIComponent(action_id || actionId)\n  } else {\n    if (method == null) method = 'PUT'\n    path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(watch_id || watchId) + '/' + '_ack'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.activateWatch = function watcherActivateWatchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.watch_id == null && params.watchId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: watch_id or watchId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, watchId, watch_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(watch_id || watchId) + '/' + '_activate'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.deactivateWatch = function watcherDeactivateWatchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.watch_id == null && params.watchId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: watch_id or watchId')\n    return handleError(err, callback)\n  }\n\n  let { method, body, watchId, watch_id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(watch_id || watchId) + '/' + '_deactivate'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.deleteWatch = function watcherDeleteWatchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'DELETE'\n  path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.executeWatch = function watcherExecuteWatchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((id) != null) {\n    if (method == null) method = 'PUT'\n    path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(id) + '/' + '_execute'\n  } else {\n    if (method == null) method = 'PUT'\n    path = '/' + '_watcher' + '/' + 'watch' + '/' + '_execute'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.getWatch = function watcherGetWatchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.putWatch = function watcherPutWatchApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id')\n    return handleError(err, callback)\n  }\n\n  let { method, body, id, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'PUT'\n  path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(id)\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.queryWatches = function watcherQueryWatchesApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = body == null ? 'GET' : 'POST'\n  path = '/' + '_watcher' + '/' + '_query' + '/' + 'watches'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.start = function watcherStartApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_watcher' + '/' + '_start'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.stats = function watcherStatsApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, metric, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if ((metric) != null) {\n    if (method == null) method = 'GET'\n    path = '/' + '_watcher' + '/' + 'stats' + '/' + encodeURIComponent(metric)\n  } else {\n    if (method == null) method = 'GET'\n    path = '/' + '_watcher' + '/' + 'stats'\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nWatcherApi.prototype.stop = function watcherStopApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'POST'\n  path = '/' + '_watcher' + '/' + '_stop'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nObject.defineProperties(WatcherApi.prototype, {\n  ack_watch: { get () { return this.ackWatch } },\n  activate_watch: { get () { return this.activateWatch } },\n  deactivate_watch: { get () { return this.deactivateWatch } },\n  delete_watch: { get () { return this.deleteWatch } },\n  execute_watch: { get () { return this.executeWatch } },\n  get_watch: { get () { return this.getWatch } },\n  put_watch: { get () { return this.putWatch } },\n  query_watches: { get () { return this.queryWatches } }\n})\n\nmodule.exports = WatcherApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\nconst acceptedQuerystring = ['categories', 'accept_enterprise', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'master_timeout']\nconst snakeCase = { acceptEnterprise: 'accept_enterprise', errorTrace: 'error_trace', filterPath: 'filter_path', masterTimeout: 'master_timeout' }\n\nfunction XpackApi (transport, ConfigurationError) {\n  this.transport = transport\n  this[kConfigurationError] = ConfigurationError\n}\n\nXpackApi.prototype.info = function xpackInfoApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_xpack'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nXpackApi.prototype.usage = function xpackUsageApi (params, options, callback) {\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\n\n  let { method, body, ...querystring } = params\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\n\n  let path = ''\n  if (method == null) method = 'GET'\n  path = '/' + '_xpack' + '/' + 'usage'\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  }\n\n  return this.transport.request(request, options, callback)\n}\n\nmodule.exports = XpackApi\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst AsyncSearchApi = require('./api/async_search')\nconst AutoscalingApi = require('./api/autoscaling')\nconst bulkApi = require('./api/bulk')\nconst CatApi = require('./api/cat')\nconst CcrApi = require('./api/ccr')\nconst clearScrollApi = require('./api/clear_scroll')\nconst closePointInTimeApi = require('./api/close_point_in_time')\nconst ClusterApi = require('./api/cluster')\nconst countApi = require('./api/count')\nconst createApi = require('./api/create')\nconst DanglingIndicesApi = require('./api/dangling_indices')\nconst deleteApi = require('./api/delete')\nconst deleteByQueryApi = require('./api/delete_by_query')\nconst deleteByQueryRethrottleApi = require('./api/delete_by_query_rethrottle')\nconst deleteScriptApi = require('./api/delete_script')\nconst EnrichApi = require('./api/enrich')\nconst EqlApi = require('./api/eql')\nconst existsApi = require('./api/exists')\nconst existsSourceApi = require('./api/exists_source')\nconst explainApi = require('./api/explain')\nconst FeaturesApi = require('./api/features')\nconst fieldCapsApi = require('./api/field_caps')\nconst FleetApi = require('./api/fleet')\nconst getApi = require('./api/get')\nconst getScriptApi = require('./api/get_script')\nconst getScriptContextApi = require('./api/get_script_context')\nconst getScriptLanguagesApi = require('./api/get_script_languages')\nconst getSourceApi = require('./api/get_source')\nconst GraphApi = require('./api/graph')\nconst IlmApi = require('./api/ilm')\nconst indexApi = require('./api/index')\nconst IndicesApi = require('./api/indices')\nconst infoApi = require('./api/info')\nconst IngestApi = require('./api/ingest')\nconst LicenseApi = require('./api/license')\nconst LogstashApi = require('./api/logstash')\nconst mgetApi = require('./api/mget')\nconst MigrationApi = require('./api/migration')\nconst MlApi = require('./api/ml')\nconst MonitoringApi = require('./api/monitoring')\nconst msearchApi = require('./api/msearch')\nconst msearchTemplateApi = require('./api/msearch_template')\nconst mtermvectorsApi = require('./api/mtermvectors')\nconst NodesApi = require('./api/nodes')\nconst openPointInTimeApi = require('./api/open_point_in_time')\nconst pingApi = require('./api/ping')\nconst putScriptApi = require('./api/put_script')\nconst rankEvalApi = require('./api/rank_eval')\nconst reindexApi = require('./api/reindex')\nconst reindexRethrottleApi = require('./api/reindex_rethrottle')\nconst renderSearchTemplateApi = require('./api/render_search_template')\nconst RollupApi = require('./api/rollup')\nconst scriptsPainlessExecuteApi = require('./api/scripts_painless_execute')\nconst scrollApi = require('./api/scroll')\nconst searchApi = require('./api/search')\nconst searchMvtApi = require('./api/search_mvt')\nconst searchShardsApi = require('./api/search_shards')\nconst searchTemplateApi = require('./api/search_template')\nconst SearchableSnapshotsApi = require('./api/searchable_snapshots')\nconst SecurityApi = require('./api/security')\nconst ShutdownApi = require('./api/shutdown')\nconst SlmApi = require('./api/slm')\nconst SnapshotApi = require('./api/snapshot')\nconst SqlApi = require('./api/sql')\nconst SslApi = require('./api/ssl')\nconst TasksApi = require('./api/tasks')\nconst termsEnumApi = require('./api/terms_enum')\nconst termvectorsApi = require('./api/termvectors')\nconst TextStructureApi = require('./api/text_structure')\nconst TransformApi = require('./api/transform')\nconst updateApi = require('./api/update')\nconst updateByQueryApi = require('./api/update_by_query')\nconst updateByQueryRethrottleApi = require('./api/update_by_query_rethrottle')\nconst WatcherApi = require('./api/watcher')\nconst XpackApi = require('./api/xpack')\n\nconst { kConfigurationError } = require('./utils')\nconst kAsyncSearch = Symbol('AsyncSearch')\nconst kAutoscaling = Symbol('Autoscaling')\nconst kCat = Symbol('Cat')\nconst kCcr = Symbol('Ccr')\nconst kCluster = Symbol('Cluster')\nconst kDanglingIndices = Symbol('DanglingIndices')\nconst kEnrich = Symbol('Enrich')\nconst kEql = Symbol('Eql')\nconst kFeatures = Symbol('Features')\nconst kFleet = Symbol('Fleet')\nconst kGraph = Symbol('Graph')\nconst kIlm = Symbol('Ilm')\nconst kIndices = Symbol('Indices')\nconst kIngest = Symbol('Ingest')\nconst kLicense = Symbol('License')\nconst kLogstash = Symbol('Logstash')\nconst kMigration = Symbol('Migration')\nconst kMl = Symbol('Ml')\nconst kMonitoring = Symbol('Monitoring')\nconst kNodes = Symbol('Nodes')\nconst kRollup = Symbol('Rollup')\nconst kSearchableSnapshots = Symbol('SearchableSnapshots')\nconst kSecurity = Symbol('Security')\nconst kShutdown = Symbol('Shutdown')\nconst kSlm = Symbol('Slm')\nconst kSnapshot = Symbol('Snapshot')\nconst kSql = Symbol('Sql')\nconst kSsl = Symbol('Ssl')\nconst kTasks = Symbol('Tasks')\nconst kTextStructure = Symbol('TextStructure')\nconst kTransform = Symbol('Transform')\nconst kWatcher = Symbol('Watcher')\nconst kXpack = Symbol('Xpack')\n\nfunction ESAPI (opts) {\n  this[kConfigurationError] = opts.ConfigurationError\n  this[kAsyncSearch] = null\n  this[kAutoscaling] = null\n  this[kCat] = null\n  this[kCcr] = null\n  this[kCluster] = null\n  this[kDanglingIndices] = null\n  this[kEnrich] = null\n  this[kEql] = null\n  this[kFeatures] = null\n  this[kFleet] = null\n  this[kGraph] = null\n  this[kIlm] = null\n  this[kIndices] = null\n  this[kIngest] = null\n  this[kLicense] = null\n  this[kLogstash] = null\n  this[kMigration] = null\n  this[kMl] = null\n  this[kMonitoring] = null\n  this[kNodes] = null\n  this[kRollup] = null\n  this[kSearchableSnapshots] = null\n  this[kSecurity] = null\n  this[kShutdown] = null\n  this[kSlm] = null\n  this[kSnapshot] = null\n  this[kSql] = null\n  this[kSsl] = null\n  this[kTasks] = null\n  this[kTextStructure] = null\n  this[kTransform] = null\n  this[kWatcher] = null\n  this[kXpack] = null\n}\n\nESAPI.prototype.bulk = bulkApi\nESAPI.prototype.clearScroll = clearScrollApi\nESAPI.prototype.closePointInTime = closePointInTimeApi\nESAPI.prototype.count = countApi\nESAPI.prototype.create = createApi\nESAPI.prototype.delete = deleteApi\nESAPI.prototype.deleteByQuery = deleteByQueryApi\nESAPI.prototype.deleteByQueryRethrottle = deleteByQueryRethrottleApi\nESAPI.prototype.deleteScript = deleteScriptApi\nESAPI.prototype.exists = existsApi\nESAPI.prototype.existsSource = existsSourceApi\nESAPI.prototype.explain = explainApi\nESAPI.prototype.fieldCaps = fieldCapsApi\nESAPI.prototype.get = getApi\nESAPI.prototype.getScript = getScriptApi\nESAPI.prototype.getScriptContext = getScriptContextApi\nESAPI.prototype.getScriptLanguages = getScriptLanguagesApi\nESAPI.prototype.getSource = getSourceApi\nESAPI.prototype.index = indexApi\nESAPI.prototype.info = infoApi\nESAPI.prototype.mget = mgetApi\nESAPI.prototype.msearch = msearchApi\nESAPI.prototype.msearchTemplate = msearchTemplateApi\nESAPI.prototype.mtermvectors = mtermvectorsApi\nESAPI.prototype.openPointInTime = openPointInTimeApi\nESAPI.prototype.ping = pingApi\nESAPI.prototype.putScript = putScriptApi\nESAPI.prototype.rankEval = rankEvalApi\nESAPI.prototype.reindex = reindexApi\nESAPI.prototype.reindexRethrottle = reindexRethrottleApi\nESAPI.prototype.renderSearchTemplate = renderSearchTemplateApi\nESAPI.prototype.scriptsPainlessExecute = scriptsPainlessExecuteApi\nESAPI.prototype.scroll = scrollApi\nESAPI.prototype.search = searchApi\nESAPI.prototype.searchMvt = searchMvtApi\nESAPI.prototype.searchShards = searchShardsApi\nESAPI.prototype.searchTemplate = searchTemplateApi\nESAPI.prototype.termsEnum = termsEnumApi\nESAPI.prototype.termvectors = termvectorsApi\nESAPI.prototype.update = updateApi\nESAPI.prototype.updateByQuery = updateByQueryApi\nESAPI.prototype.updateByQueryRethrottle = updateByQueryRethrottleApi\n\nObject.defineProperties(ESAPI.prototype, {\n  asyncSearch: {\n    get () {\n      if (this[kAsyncSearch] === null) {\n        this[kAsyncSearch] = new AsyncSearchApi(this.transport, this[kConfigurationError])\n      }\n      return this[kAsyncSearch]\n    }\n  },\n  async_search: { get () { return this.asyncSearch } },\n  autoscaling: {\n    get () {\n      if (this[kAutoscaling] === null) {\n        this[kAutoscaling] = new AutoscalingApi(this.transport, this[kConfigurationError])\n      }\n      return this[kAutoscaling]\n    }\n  },\n  cat: {\n    get () {\n      if (this[kCat] === null) {\n        this[kCat] = new CatApi(this.transport, this[kConfigurationError])\n      }\n      return this[kCat]\n    }\n  },\n  ccr: {\n    get () {\n      if (this[kCcr] === null) {\n        this[kCcr] = new CcrApi(this.transport, this[kConfigurationError])\n      }\n      return this[kCcr]\n    }\n  },\n  clear_scroll: { get () { return this.clearScroll } },\n  close_point_in_time: { get () { return this.closePointInTime } },\n  cluster: {\n    get () {\n      if (this[kCluster] === null) {\n        this[kCluster] = new ClusterApi(this.transport, this[kConfigurationError])\n      }\n      return this[kCluster]\n    }\n  },\n  danglingIndices: {\n    get () {\n      if (this[kDanglingIndices] === null) {\n        this[kDanglingIndices] = new DanglingIndicesApi(this.transport, this[kConfigurationError])\n      }\n      return this[kDanglingIndices]\n    }\n  },\n  dangling_indices: { get () { return this.danglingIndices } },\n  delete_by_query: { get () { return this.deleteByQuery } },\n  delete_by_query_rethrottle: { get () { return this.deleteByQueryRethrottle } },\n  delete_script: { get () { return this.deleteScript } },\n  enrich: {\n    get () {\n      if (this[kEnrich] === null) {\n        this[kEnrich] = new EnrichApi(this.transport, this[kConfigurationError])\n      }\n      return this[kEnrich]\n    }\n  },\n  eql: {\n    get () {\n      if (this[kEql] === null) {\n        this[kEql] = new EqlApi(this.transport, this[kConfigurationError])\n      }\n      return this[kEql]\n    }\n  },\n  exists_source: { get () { return this.existsSource } },\n  features: {\n    get () {\n      if (this[kFeatures] === null) {\n        this[kFeatures] = new FeaturesApi(this.transport, this[kConfigurationError])\n      }\n      return this[kFeatures]\n    }\n  },\n  field_caps: { get () { return this.fieldCaps } },\n  fleet: {\n    get () {\n      if (this[kFleet] === null) {\n        this[kFleet] = new FleetApi(this.transport, this[kConfigurationError])\n      }\n      return this[kFleet]\n    }\n  },\n  get_script: { get () { return this.getScript } },\n  get_script_context: { get () { return this.getScriptContext } },\n  get_script_languages: { get () { return this.getScriptLanguages } },\n  get_source: { get () { return this.getSource } },\n  graph: {\n    get () {\n      if (this[kGraph] === null) {\n        this[kGraph] = new GraphApi(this.transport, this[kConfigurationError])\n      }\n      return this[kGraph]\n    }\n  },\n  ilm: {\n    get () {\n      if (this[kIlm] === null) {\n        this[kIlm] = new IlmApi(this.transport, this[kConfigurationError])\n      }\n      return this[kIlm]\n    }\n  },\n  indices: {\n    get () {\n      if (this[kIndices] === null) {\n        this[kIndices] = new IndicesApi(this.transport, this[kConfigurationError])\n      }\n      return this[kIndices]\n    }\n  },\n  ingest: {\n    get () {\n      if (this[kIngest] === null) {\n        this[kIngest] = new IngestApi(this.transport, this[kConfigurationError])\n      }\n      return this[kIngest]\n    }\n  },\n  license: {\n    get () {\n      if (this[kLicense] === null) {\n        this[kLicense] = new LicenseApi(this.transport, this[kConfigurationError])\n      }\n      return this[kLicense]\n    }\n  },\n  logstash: {\n    get () {\n      if (this[kLogstash] === null) {\n        this[kLogstash] = new LogstashApi(this.transport, this[kConfigurationError])\n      }\n      return this[kLogstash]\n    }\n  },\n  migration: {\n    get () {\n      if (this[kMigration] === null) {\n        this[kMigration] = new MigrationApi(this.transport, this[kConfigurationError])\n      }\n      return this[kMigration]\n    }\n  },\n  ml: {\n    get () {\n      if (this[kMl] === null) {\n        this[kMl] = new MlApi(this.transport, this[kConfigurationError])\n      }\n      return this[kMl]\n    }\n  },\n  monitoring: {\n    get () {\n      if (this[kMonitoring] === null) {\n        this[kMonitoring] = new MonitoringApi(this.transport, this[kConfigurationError])\n      }\n      return this[kMonitoring]\n    }\n  },\n  msearch_template: { get () { return this.msearchTemplate } },\n  nodes: {\n    get () {\n      if (this[kNodes] === null) {\n        this[kNodes] = new NodesApi(this.transport, this[kConfigurationError])\n      }\n      return this[kNodes]\n    }\n  },\n  open_point_in_time: { get () { return this.openPointInTime } },\n  put_script: { get () { return this.putScript } },\n  rank_eval: { get () { return this.rankEval } },\n  reindex_rethrottle: { get () { return this.reindexRethrottle } },\n  render_search_template: { get () { return this.renderSearchTemplate } },\n  rollup: {\n    get () {\n      if (this[kRollup] === null) {\n        this[kRollup] = new RollupApi(this.transport, this[kConfigurationError])\n      }\n      return this[kRollup]\n    }\n  },\n  scripts_painless_execute: { get () { return this.scriptsPainlessExecute } },\n  search_mvt: { get () { return this.searchMvt } },\n  search_shards: { get () { return this.searchShards } },\n  search_template: { get () { return this.searchTemplate } },\n  searchableSnapshots: {\n    get () {\n      if (this[kSearchableSnapshots] === null) {\n        this[kSearchableSnapshots] = new SearchableSnapshotsApi(this.transport, this[kConfigurationError])\n      }\n      return this[kSearchableSnapshots]\n    }\n  },\n  searchable_snapshots: { get () { return this.searchableSnapshots } },\n  security: {\n    get () {\n      if (this[kSecurity] === null) {\n        this[kSecurity] = new SecurityApi(this.transport, this[kConfigurationError])\n      }\n      return this[kSecurity]\n    }\n  },\n  shutdown: {\n    get () {\n      if (this[kShutdown] === null) {\n        this[kShutdown] = new ShutdownApi(this.transport, this[kConfigurationError])\n      }\n      return this[kShutdown]\n    }\n  },\n  slm: {\n    get () {\n      if (this[kSlm] === null) {\n        this[kSlm] = new SlmApi(this.transport, this[kConfigurationError])\n      }\n      return this[kSlm]\n    }\n  },\n  snapshot: {\n    get () {\n      if (this[kSnapshot] === null) {\n        this[kSnapshot] = new SnapshotApi(this.transport, this[kConfigurationError])\n      }\n      return this[kSnapshot]\n    }\n  },\n  sql: {\n    get () {\n      if (this[kSql] === null) {\n        this[kSql] = new SqlApi(this.transport, this[kConfigurationError])\n      }\n      return this[kSql]\n    }\n  },\n  ssl: {\n    get () {\n      if (this[kSsl] === null) {\n        this[kSsl] = new SslApi(this.transport, this[kConfigurationError])\n      }\n      return this[kSsl]\n    }\n  },\n  tasks: {\n    get () {\n      if (this[kTasks] === null) {\n        this[kTasks] = new TasksApi(this.transport, this[kConfigurationError])\n      }\n      return this[kTasks]\n    }\n  },\n  terms_enum: { get () { return this.termsEnum } },\n  textStructure: {\n    get () {\n      if (this[kTextStructure] === null) {\n        this[kTextStructure] = new TextStructureApi(this.transport, this[kConfigurationError])\n      }\n      return this[kTextStructure]\n    }\n  },\n  text_structure: { get () { return this.textStructure } },\n  transform: {\n    get () {\n      if (this[kTransform] === null) {\n        this[kTransform] = new TransformApi(this.transport, this[kConfigurationError])\n      }\n      return this[kTransform]\n    }\n  },\n  update_by_query: { get () { return this.updateByQuery } },\n  update_by_query_rethrottle: { get () { return this.updateByQueryRethrottle } },\n  watcher: {\n    get () {\n      if (this[kWatcher] === null) {\n        this[kWatcher] = new WatcherApi(this.transport, this[kConfigurationError])\n      }\n      return this[kWatcher]\n    }\n  },\n  xpack: {\n    get () {\n      if (this[kXpack] === null) {\n        this[kXpack] = new XpackApi(this.transport, this[kConfigurationError])\n      }\n      return this[kXpack]\n    }\n  }\n})\n\nmodule.exports = ESAPI\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst result = { body: null, statusCode: null, headers: null, warnings: null }\nconst kConfigurationError = Symbol('configuration error')\n\nfunction handleError (err, callback) {\n  if (callback) {\n    process.nextTick(callback, err, result)\n    return { then: noop, catch: noop, abort: noop }\n  }\n  return Promise.reject(err)\n}\n\nfunction snakeCaseKeys (acceptedQuerystring, snakeCase, querystring) {\n  const target = {}\n  const keys = Object.keys(querystring)\n  for (let i = 0, len = keys.length; i < len; i++) {\n    const key = keys[i]\n    target[snakeCase[key] || key] = querystring[key]\n  }\n  return target\n}\n\nfunction normalizeArguments (params, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = {}\n  }\n  if (typeof params === 'function' || params == null) {\n    callback = params\n    params = {}\n    options = {}\n  }\n  return [params, options, callback]\n}\n\nfunction noop () {}\n\nmodule.exports = { handleError, snakeCaseKeys, normalizeArguments, noop, kConfigurationError }\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst { EventEmitter } = require('events')\nconst { URL } = require('url')\nconst debug = require('debug')('elasticsearch')\nconst Transport = require('./lib/Transport')\nconst Connection = require('./lib/Connection')\nconst { ConnectionPool, CloudConnectionPool } = require('./lib/pool')\nconst Helpers = require('./lib/Helpers')\nconst Serializer = require('./lib/Serializer')\nconst errors = require('./lib/errors')\nconst { ConfigurationError } = errors\nconst { prepareHeaders } = Connection.internals\nlet clientVersion = require('./package.json').version\n/* istanbul ignore next */\nif (clientVersion.includes('-')) {\n  // clean prerelease\n  clientVersion = clientVersion.slice(0, clientVersion.indexOf('-')) + 'p'\n}\nconst nodeVersion = process.versions.node\n\nconst kInitialOptions = Symbol('elasticsearchjs-initial-options')\nconst kChild = Symbol('elasticsearchjs-child')\nconst kExtensions = Symbol('elasticsearchjs-extensions')\nconst kEventEmitter = Symbol('elasticsearchjs-event-emitter')\n\nconst ESAPI = require('./api')\n\nclass Client extends ESAPI {\n  constructor (opts = {}) {\n    super({ ConfigurationError })\n    if (opts.cloud && opts[kChild] === undefined) {\n      const { id, username, password } = opts.cloud\n      // the cloud id is `cluster-name:base64encodedurl`\n      // the url is a string divided by two '$', the first is the cloud url\n      // the second the elasticsearch instance, the third the kibana instance\n      const cloudUrls = Buffer.from(id.split(':')[1], 'base64').toString().split('$')\n\n      // TODO: remove username and password here in 8\n      if (username && password) {\n        opts.auth = Object.assign({}, opts.auth, { username, password })\n      }\n      opts.node = `https://${cloudUrls[1]}.${cloudUrls[0]}`\n\n      // Cloud has better performances with compression enabled\n      // see https://github.com/elastic/elasticsearch-py/pull/704.\n      // So unless the user specifies otherwise, we enable compression.\n      if (opts.compression == null) opts.compression = 'gzip'\n      if (opts.suggestCompression == null) opts.suggestCompression = true\n      if (opts.ssl == null ||\n         (opts.ssl && opts.ssl.secureProtocol == null)) {\n        opts.ssl = opts.ssl || {}\n        opts.ssl.secureProtocol = 'TLSv1_2_method'\n      }\n    }\n\n    if (!opts.node && !opts.nodes) {\n      throw new ConfigurationError('Missing node(s) option')\n    }\n\n    if (opts[kChild] === undefined) {\n      const checkAuth = getAuth(opts.node || opts.nodes)\n      if (checkAuth && checkAuth.username && checkAuth.password) {\n        opts.auth = Object.assign({}, opts.auth, { username: checkAuth.username, password: checkAuth.password })\n      }\n    }\n\n    const options = opts[kChild] !== undefined\n      ? opts[kChild].initialOptions\n      : Object.assign({}, {\n        Connection,\n        Transport,\n        Serializer,\n        ConnectionPool: opts.cloud ? CloudConnectionPool : ConnectionPool,\n        maxRetries: 3,\n        requestTimeout: 30000,\n        pingTimeout: 3000,\n        sniffInterval: false,\n        sniffOnStart: false,\n        sniffEndpoint: '_nodes/_all/http',\n        sniffOnConnectionFault: false,\n        resurrectStrategy: 'ping',\n        suggestCompression: false,\n        compression: false,\n        ssl: null,\n        caFingerprint: null,\n        agent: null,\n        headers: {},\n        nodeFilter: null,\n        nodeSelector: 'round-robin',\n        generateRequestId: null,\n        name: 'elasticsearch-js',\n        auth: null,\n        opaqueIdPrefix: null,\n        context: null,\n        proxy: null,\n        enableMetaHeader: true,\n        disablePrototypePoisoningProtection: false\n      }, opts)\n\n    if (options.caFingerprint !== null && isHttpConnection(opts.node || opts.nodes)) {\n      throw new ConfigurationError('You can\\'t configure the caFingerprint with a http connection')\n    }\n\n    if (process.env.ELASTIC_CLIENT_APIVERSIONING === 'true') {\n      options.headers = Object.assign({ accept: 'application/vnd.elasticsearch+json; compatible-with=7' }, options.headers)\n    }\n\n    this[kInitialOptions] = options\n    this[kExtensions] = []\n    this.name = options.name\n\n    if (options.enableMetaHeader) {\n      options.headers['x-elastic-client-meta'] = `es=${clientVersion},js=${nodeVersion},t=${clientVersion},hc=${nodeVersion}`\n    }\n\n    if (opts[kChild] !== undefined) {\n      this.serializer = options[kChild].serializer\n      this.connectionPool = options[kChild].connectionPool\n      this[kEventEmitter] = options[kChild].eventEmitter\n    } else {\n      this[kEventEmitter] = new EventEmitter()\n      this.serializer = new options.Serializer({\n        disablePrototypePoisoningProtection: options.disablePrototypePoisoningProtection\n      })\n      this.connectionPool = new options.ConnectionPool({\n        pingTimeout: options.pingTimeout,\n        resurrectStrategy: options.resurrectStrategy,\n        ssl: options.ssl,\n        agent: options.agent,\n        proxy: options.proxy,\n        Connection: options.Connection,\n        auth: options.auth,\n        emit: this[kEventEmitter].emit.bind(this[kEventEmitter]),\n        caFingerprint: options.caFingerprint,\n        sniffEnabled: options.sniffInterval !== false ||\n                      options.sniffOnStart !== false ||\n                      options.sniffOnConnectionFault !== false\n      })\n      // Add the connections before initialize the Transport\n      this.connectionPool.addConnection(options.node || options.nodes)\n    }\n\n    this.transport = new options.Transport({\n      emit: this[kEventEmitter].emit.bind(this[kEventEmitter]),\n      connectionPool: this.connectionPool,\n      serializer: this.serializer,\n      maxRetries: options.maxRetries,\n      requestTimeout: options.requestTimeout,\n      sniffInterval: options.sniffInterval,\n      sniffOnStart: options.sniffOnStart,\n      sniffOnConnectionFault: options.sniffOnConnectionFault,\n      sniffEndpoint: options.sniffEndpoint,\n      suggestCompression: options.suggestCompression,\n      compression: options.compression,\n      headers: options.headers,\n      nodeFilter: options.nodeFilter,\n      nodeSelector: options.nodeSelector,\n      generateRequestId: options.generateRequestId,\n      name: options.name,\n      opaqueIdPrefix: options.opaqueIdPrefix,\n      context: options.context\n    })\n\n    this.helpers = new Helpers({\n      client: this,\n      maxRetries: options.maxRetries,\n      metaHeader: options.enableMetaHeader\n        ? `es=${clientVersion},js=${nodeVersion},t=${clientVersion},hc=${nodeVersion}`\n        : null\n    })\n  }\n\n  get emit () {\n    return this[kEventEmitter].emit.bind(this[kEventEmitter])\n  }\n\n  get on () {\n    return this[kEventEmitter].on.bind(this[kEventEmitter])\n  }\n\n  get once () {\n    return this[kEventEmitter].once.bind(this[kEventEmitter])\n  }\n\n  get off () {\n    return this[kEventEmitter].off.bind(this[kEventEmitter])\n  }\n\n  extend (name, opts, fn) {\n    if (typeof opts === 'function') {\n      fn = opts\n      opts = {}\n    }\n\n    let [namespace, method] = name.split('.')\n    if (method == null) {\n      method = namespace\n      namespace = null\n    }\n\n    if (namespace != null) {\n      if (this[namespace] != null && this[namespace][method] != null && opts.force !== true) {\n        throw new Error(`The method \"${method}\" already exists on namespace \"${namespace}\"`)\n      }\n\n      if (this[namespace] == null) this[namespace] = {}\n      this[namespace][method] = fn({\n        makeRequest: this.transport.request.bind(this.transport),\n        result: { body: null, statusCode: null, headers: null, warnings: null },\n        ConfigurationError\n      })\n    } else {\n      if (this[method] != null && opts.force !== true) {\n        throw new Error(`The method \"${method}\" already exists`)\n      }\n\n      this[method] = fn({\n        makeRequest: this.transport.request.bind(this.transport),\n        result: { body: null, statusCode: null, headers: null, warnings: null },\n        ConfigurationError\n      })\n    }\n\n    this[kExtensions].push({ name, opts, fn })\n  }\n\n  child (opts) {\n    // Merge the new options with the initial ones\n    const options = Object.assign({}, this[kInitialOptions], opts)\n    // Pass to the child client the parent instances that cannot be overriden\n    options[kChild] = {\n      connectionPool: this.connectionPool,\n      serializer: this.serializer,\n      eventEmitter: this[kEventEmitter],\n      initialOptions: options\n    }\n\n    /* istanbul ignore else */\n    if (options.auth !== undefined) {\n      options.headers = prepareHeaders(options.headers, options.auth)\n    }\n\n    const client = new Client(options)\n    // sync product check\n    const tSymbol = Object.getOwnPropertySymbols(this.transport)\n      .filter(symbol => symbol.description === 'product check')[0]\n    client.transport[tSymbol] = this.transport[tSymbol]\n    // Add parent extensions\n    if (this[kExtensions].length > 0) {\n      this[kExtensions].forEach(({ name, opts, fn }) => {\n        client.extend(name, opts, fn)\n      })\n    }\n    return client\n  }\n\n  close (callback) {\n    if (callback == null) {\n      return new Promise((resolve, reject) => {\n        this.close(resolve)\n      })\n    }\n    debug('Closing the client')\n    this.connectionPool.empty(callback)\n  }\n}\n\nfunction getAuth (node) {\n  if (Array.isArray(node)) {\n    for (const url of node) {\n      const auth = getUsernameAndPassword(url)\n      if (auth.username !== '' && auth.password !== '') {\n        return auth\n      }\n    }\n\n    return null\n  }\n\n  const auth = getUsernameAndPassword(node)\n  if (auth.username !== '' && auth.password !== '') {\n    return auth\n  }\n\n  return null\n\n  function getUsernameAndPassword (node) {\n    /* istanbul ignore else */\n    if (typeof node === 'string') {\n      const { username, password } = new URL(node)\n      return {\n        username: decodeURIComponent(username),\n        password: decodeURIComponent(password)\n      }\n    } else if (node.url instanceof URL) {\n      return {\n        username: decodeURIComponent(node.url.username),\n        password: decodeURIComponent(node.url.password)\n      }\n    }\n  }\n}\n\nfunction isHttpConnection (node) {\n  if (Array.isArray(node)) {\n    return node.some((n) => (typeof n === 'string' ? new URL(n).protocol : n.url.protocol) === 'http:')\n  } else {\n    return (typeof node === 'string' ? new URL(node).protocol : node.url.protocol) === 'http:'\n  }\n}\n\nconst events = {\n  RESPONSE: 'response',\n  REQUEST: 'request',\n  SNIFF: 'sniff',\n  RESURRECT: 'resurrect',\n  SERIALIZATION: 'serialization',\n  DESERIALIZATION: 'deserialization'\n}\n\nmodule.exports = {\n  Client,\n  Transport,\n  ConnectionPool,\n  Connection,\n  Serializer,\n  events,\n  errors\n}\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst assert = require('assert')\nconst { inspect } = require('util')\nconst hpagent = require('hpagent')\nconst http = require('http')\nconst https = require('https')\nconst debug = require('debug')('elasticsearch')\nconst { pipeline } = require('stream')\nconst INVALID_PATH_REGEX = /[^\\u0021-\\u00ff]/\nconst {\n  ConnectionError,\n  RequestAbortedError,\n  TimeoutError,\n  ConfigurationError\n} = require('./errors')\n\nclass Connection {\n  constructor (opts) {\n    this.url = opts.url\n    this.ssl = opts.ssl || null\n    this.id = opts.id || stripAuth(opts.url.href)\n    this.headers = prepareHeaders(opts.headers, opts.auth)\n    this.deadCount = 0\n    this.resurrectTimeout = 0\n    this.caFingerprint = opts.caFingerprint\n\n    this._openRequests = 0\n    this._status = opts.status || Connection.statuses.ALIVE\n    this.roles = Object.assign({}, defaultRoles, opts.roles)\n\n    if (!['http:', 'https:'].includes(this.url.protocol)) {\n      throw new ConfigurationError(`Invalid protocol: '${this.url.protocol}'`)\n    }\n\n    if (typeof opts.agent === 'function') {\n      this.agent = opts.agent(opts)\n    } else if (opts.agent === false) {\n      this.agent = undefined\n    } else {\n      const agentOptions = Object.assign({}, {\n        keepAlive: true,\n        keepAliveMsecs: 1000,\n        maxSockets: 256,\n        maxFreeSockets: 256,\n        scheduling: 'lifo'\n      }, opts.agent)\n      if (opts.proxy) {\n        agentOptions.proxy = opts.proxy\n        this.agent = this.url.protocol === 'http:'\n          ? new hpagent.HttpProxyAgent(agentOptions)\n          : new hpagent.HttpsProxyAgent(Object.assign({}, agentOptions, this.ssl))\n      } else {\n        this.agent = this.url.protocol === 'http:'\n          ? new http.Agent(agentOptions)\n          : new https.Agent(Object.assign({}, agentOptions, this.ssl))\n      }\n    }\n\n    this.makeRequest = this.url.protocol === 'http:'\n      ? http.request\n      : https.request\n  }\n\n  request (params, callback) {\n    this._openRequests++\n    let cleanedListeners = false\n\n    const requestParams = this.buildRequestObject(params)\n    // https://github.com/nodejs/node/commit/b961d9fd83\n    if (INVALID_PATH_REGEX.test(requestParams.path) === true) {\n      callback(new TypeError(`ERR_UNESCAPED_CHARACTERS: ${requestParams.path}`), null)\n      /* istanbul ignore next */\n      return { abort: () => {} }\n    }\n\n    debug('Starting a new request', params)\n    const request = this.makeRequest(requestParams)\n\n    const onResponse = response => {\n      cleanListeners()\n      this._openRequests--\n      callback(null, response)\n    }\n\n    const onTimeout = () => {\n      cleanListeners()\n      this._openRequests--\n      request.once('error', () => {}) // we need to catch the request aborted error\n      request.abort()\n      callback(new TimeoutError('Request timed out', params), null)\n    }\n\n    const onError = err => {\n      cleanListeners()\n      this._openRequests--\n      callback(new ConnectionError(err.message), null)\n    }\n\n    const onAbort = () => {\n      cleanListeners()\n      request.once('error', () => {}) // we need to catch the request aborted error\n      debug('Request aborted', params)\n      this._openRequests--\n      callback(new RequestAbortedError(), null)\n    }\n\n    const onSocket = socket => {\n      /* istanbul ignore else */\n      if (!socket.isSessionReused()) {\n        socket.once('secureConnect', () => {\n          const issuerCertificate = getIssuerCertificate(socket)\n          /* istanbul ignore next */\n          if (issuerCertificate == null) {\n            onError(new Error('Invalid or malformed certificate'))\n            request.once('error', () => {}) // we need to catch the request aborted error\n            return request.abort()\n          }\n\n          // Check if fingerprint matches\n          /* istanbul ignore else */\n          if (this.caFingerprint !== issuerCertificate.fingerprint256) {\n            onError(new Error('Server certificate CA fingerprint does not match the value configured in caFingerprint'))\n            request.once('error', () => {}) // we need to catch the request aborted error\n            return request.abort()\n          }\n        })\n      }\n    }\n\n    request.on('response', onResponse)\n    request.on('timeout', onTimeout)\n    request.on('error', onError)\n    request.on('abort', onAbort)\n    if (this.caFingerprint != null) {\n      request.on('socket', onSocket)\n    }\n\n    // Disables the Nagle algorithm\n    request.setNoDelay(true)\n\n    // starts the request\n    if (isStream(params.body) === true) {\n      pipeline(params.body, request, err => {\n        /* istanbul ignore if  */\n        if (err != null && cleanedListeners === false) {\n          cleanListeners()\n          this._openRequests--\n          callback(err, null)\n        }\n      })\n    } else {\n      request.end(params.body)\n    }\n\n    return request\n\n    function cleanListeners () {\n      request.removeListener('response', onResponse)\n      request.removeListener('timeout', onTimeout)\n      request.removeListener('error', onError)\n      request.removeListener('abort', onAbort)\n      request.removeListener('socket', onSocket)\n      cleanedListeners = true\n    }\n  }\n\n  // TODO: write a better closing logic\n  close (callback = () => {}) {\n    debug('Closing connection', this.id)\n    if (this._openRequests > 0) {\n      setTimeout(() => this.close(callback), 1000)\n    } else {\n      if (this.agent !== undefined) {\n        this.agent.destroy()\n      }\n      callback()\n    }\n  }\n\n  setRole (role, enabled) {\n    if (validRoles.indexOf(role) === -1) {\n      throw new ConfigurationError(`Unsupported role: '${role}'`)\n    }\n    if (typeof enabled !== 'boolean') {\n      throw new ConfigurationError('enabled should be a boolean')\n    }\n\n    this.roles[role] = enabled\n    return this\n  }\n\n  get status () {\n    return this._status\n  }\n\n  set status (status) {\n    assert(\n      ~validStatuses.indexOf(status),\n      `Unsupported status: '${status}'`\n    )\n    this._status = status\n  }\n\n  buildRequestObject (params) {\n    const url = this.url\n    const request = {\n      protocol: url.protocol,\n      hostname: url.hostname[0] === '['\n        ? url.hostname.slice(1, -1)\n        : url.hostname,\n      hash: url.hash,\n      search: url.search,\n      pathname: url.pathname,\n      path: '',\n      href: url.href,\n      origin: url.origin,\n      // https://github.com/elastic/elasticsearch-js/issues/843\n      port: url.port !== '' ? url.port : undefined,\n      headers: this.headers,\n      agent: this.agent\n    }\n\n    const paramsKeys = Object.keys(params)\n    for (let i = 0, len = paramsKeys.length; i < len; i++) {\n      const key = paramsKeys[i]\n      if (key === 'path') {\n        request.pathname = resolve(request.pathname, params[key])\n      } else if (key === 'querystring' && !!params[key] === true) {\n        if (request.search === '') {\n          request.search = '?' + params[key]\n        } else {\n          request.search += '&' + params[key]\n        }\n      } else if (key === 'headers') {\n        request.headers = Object.assign({}, request.headers, params.headers)\n      } else {\n        request[key] = params[key]\n      }\n    }\n\n    request.path = request.pathname + request.search\n\n    return request\n  }\n\n  // Handles console.log and utils.inspect invocations.\n  // We want to hide `auth`, `agent` and `ssl` since they made\n  // the logs very hard to read. The user can still\n  // access them with `instance.agent` and `instance.ssl`.\n  [inspect.custom] (depth, options) {\n    const {\n      authorization,\n      ...headers\n    } = this.headers\n\n    return {\n      url: stripAuth(this.url.toString()),\n      id: this.id,\n      headers,\n      deadCount: this.deadCount,\n      resurrectTimeout: this.resurrectTimeout,\n      _openRequests: this._openRequests,\n      status: this.status,\n      roles: this.roles\n    }\n  }\n\n  toJSON () {\n    const {\n      authorization,\n      ...headers\n    } = this.headers\n\n    return {\n      url: stripAuth(this.url.toString()),\n      id: this.id,\n      headers,\n      deadCount: this.deadCount,\n      resurrectTimeout: this.resurrectTimeout,\n      _openRequests: this._openRequests,\n      status: this.status,\n      roles: this.roles\n    }\n  }\n}\n\nConnection.statuses = {\n  ALIVE: 'alive',\n  DEAD: 'dead'\n}\n\nConnection.roles = {\n  MASTER: 'master',\n  DATA: 'data',\n  INGEST: 'ingest',\n  ML: 'ml'\n}\n\nconst defaultRoles = {\n  [Connection.roles.MASTER]: true,\n  [Connection.roles.DATA]: true,\n  [Connection.roles.INGEST]: true,\n  [Connection.roles.ML]: false\n}\n\nconst validStatuses = Object.keys(Connection.statuses)\n  .map(k => Connection.statuses[k])\nconst validRoles = Object.keys(Connection.roles)\n  .map(k => Connection.roles[k])\n\nfunction stripAuth (url) {\n  if (url.indexOf('@') === -1) return url\n  return url.slice(0, url.indexOf('//') + 2) + url.slice(url.indexOf('@') + 1)\n}\n\nfunction isStream (obj) {\n  return obj != null && typeof obj.pipe === 'function'\n}\n\nfunction resolve (host, path) {\n  const hostEndWithSlash = host[host.length - 1] === '/'\n  const pathStartsWithSlash = path[0] === '/'\n\n  if (hostEndWithSlash === true && pathStartsWithSlash === true) {\n    return host + path.slice(1)\n  } else if (hostEndWithSlash !== pathStartsWithSlash) {\n    return host + path\n  } else {\n    return host + '/' + path\n  }\n}\n\nfunction prepareHeaders (headers = {}, auth) {\n  if (auth != null && headers.authorization == null) {\n    /* istanbul ignore else */\n    if (auth.apiKey) {\n      if (typeof auth.apiKey === 'object') {\n        headers.authorization = 'ApiKey ' + Buffer.from(`${auth.apiKey.id}:${auth.apiKey.api_key}`).toString('base64')\n      } else {\n        headers.authorization = `ApiKey ${auth.apiKey}`\n      }\n    } else if (auth.bearer) {\n      headers.authorization = `Bearer ${auth.bearer}`\n    } else if (auth.username && auth.password) {\n      headers.authorization = 'Basic ' + Buffer.from(`${auth.username}:${auth.password}`).toString('base64')\n    }\n  }\n  return headers\n}\n\nfunction getIssuerCertificate (socket) {\n  let certificate = socket.getPeerCertificate(true)\n  while (certificate && Object.keys(certificate).length > 0) {\n    // invalid certificate\n    if (certificate.issuerCertificate == null) {\n      return null\n    }\n\n    // We have reached the root certificate.\n    // In case of self-signed certificates, `issuerCertificate` may be a circular reference.\n    if (certificate.fingerprint256 === certificate.issuerCertificate.fingerprint256) {\n      break\n    }\n\n    // continue the loop\n    certificate = certificate.issuerCertificate\n  }\n  return certificate\n}\n\nmodule.exports = Connection\nmodule.exports.internals = { prepareHeaders, getIssuerCertificate }\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\n/* eslint camelcase: 0 */\n\nconst { Readable } = require('stream')\nconst { promisify } = require('util')\nconst { ResponseError, ConfigurationError } = require('./errors')\n\nconst pImmediate = promisify(setImmediate)\nconst sleep = promisify(setTimeout)\nconst kClient = Symbol('elasticsearch-client')\nconst kMetaHeader = Symbol('meta header')\n/* istanbul ignore next */\nconst noop = () => {}\n\nclass Helpers {\n  constructor (opts) {\n    this[kClient] = opts.client\n    this[kMetaHeader] = opts.metaHeader\n    this.maxRetries = opts.maxRetries\n  }\n\n  /**\n   * Runs a search operation. The only difference between client.search and this utility,\n   * is that we are only returning the hits to the user and not the full ES response.\n   * This helper automatically adds `filter_path=hits.hits._source` to the querystring,\n   * as it will only need the documents source.\n   * @param {object} params - The Elasticsearch's search parameters.\n   * @param {object} options - The client optional configuration for this request.\n   * @return {array} The documents that matched the request.\n   */\n  async search (params, options) {\n    appendFilterPath('hits.hits._source', params, true)\n    const { body } = await this[kClient].search(params, options)\n    if (body.hits && body.hits.hits) {\n      return body.hits.hits.map(d => d._source)\n    }\n    return []\n  }\n\n  /**\n   * Runs a scroll search operation. This function returns an async iterator, allowing\n   * the user to use a for await loop to get all the results of a given search.\n   * ```js\n   * for await (const result of client.helpers.scrollSearch({ params })) {\n   *   console.log(result)\n   * }\n   * ```\n   * Each result represents the entire body of a single scroll search request,\n   * if you just need to scroll the results, use scrollDocuments.\n   * This function handles automatically retries on 429 status code.\n   * @param {object} params - The Elasticsearch's search parameters.\n   * @param {object} options - The client optional configuration for this request.\n   * @return {iterator} the async iterator\n   */\n  async * scrollSearch (params, options = {}) {\n    if (this[kMetaHeader] !== null) {\n      options.headers = options.headers || {}\n      options.headers['x-elastic-client-meta'] = this[kMetaHeader] + ',h=s'\n    }\n    // TODO: study scroll search slices\n    const wait = options.wait || 5000\n    const maxRetries = options.maxRetries || this.maxRetries\n    if (Array.isArray(options.ignore)) {\n      options.ignore.push(429)\n    } else {\n      options.ignore = [429]\n    }\n    params.scroll = params.scroll || '1m'\n    appendFilterPath('_scroll_id', params, false)\n    const { method, body, index, ...querystring } = params\n\n    let response = null\n    for (let i = 0; i <= maxRetries; i++) {\n      response = await this[kClient].search(params, options)\n      if (response.statusCode !== 429) break\n      await sleep(wait)\n    }\n    if (response.statusCode === 429) {\n      throw new ResponseError(response)\n    }\n\n    let scroll_id = response.body._scroll_id\n    let stop = false\n    const clear = async () => {\n      stop = true\n      await this[kClient].clearScroll(\n        { body: { scroll_id } },\n        { ignore: [400], ...options }\n      )\n    }\n\n    while (response.body.hits && response.body.hits.hits.length > 0) {\n      // scroll id is always present in the response, but it might\n      // change over time based on the number of shards\n      scroll_id = response.body._scroll_id\n      response.clear = clear\n      addDocumentsGetter(response)\n\n      yield response\n\n      if (stop === true) {\n        break\n      }\n\n      for (let i = 0; i <= maxRetries; i++) {\n        response = await this[kClient].scroll({\n          scroll: querystring.scroll,\n          rest_total_hits_as_int: querystring.rest_total_hits_as_int || querystring.restTotalHitsAsInt,\n          body: { scroll_id }\n        }, options)\n        if (response.statusCode !== 429) break\n        await sleep(wait)\n      }\n      if (response.statusCode === 429) {\n        throw new ResponseError(response)\n      }\n    }\n\n    if (stop === false) {\n      await clear()\n    }\n  }\n\n  /**\n   * Runs a scroll search operation. This function returns an async iterator, allowing\n   * the user to use a for await loop to get all the documents of a given search.\n   * ```js\n   * for await (const document of client.helpers.scrollSearch({ params })) {\n   *   console.log(document)\n   * }\n   * ```\n   * Each document is what you will find by running a scrollSearch and iterating on the hits array.\n   * This helper automatically adds `filter_path=hits.hits._source` to the querystring,\n   * as it will only need the documents source.\n   * @param {object} params - The Elasticsearch's search parameters.\n   * @param {object} options - The client optional configuration for this request.\n   * @return {iterator} the async iterator\n   */\n  async * scrollDocuments (params, options) {\n    appendFilterPath('hits.hits._source', params, true)\n    for await (const { documents } of this.scrollSearch(params, options)) {\n      for (const document of documents) {\n        yield document\n      }\n    }\n  }\n\n  /**\n   * Creates a msearch helper instance. Once you configure it, you can use the provided\n   * `search` method to add new searches in the queue.\n   * @param {object} options - The configuration of the msearch operations.\n   * @param {object} reqOptions - The client optional configuration for this request.\n   * @return {object} The possible operations to run.\n   */\n  msearch (options = {}, reqOptions = {}) {\n    const client = this[kClient]\n    const {\n      operations = 5,\n      concurrency = 5,\n      flushInterval = 500,\n      retries = this.maxRetries,\n      wait = 5000,\n      ...msearchOptions\n    } = options\n\n    let stopReading = false\n    let stopError = null\n    let timeoutRef = null\n    const operationsStream = new Readable({\n      objectMode: true,\n      read (size) {}\n    })\n\n    const p = iterate()\n    const helper = {\n      then (onFulfilled, onRejected) {\n        return p.then(onFulfilled, onRejected)\n      },\n      catch (onRejected) {\n        return p.catch(onRejected)\n      },\n      stop (error = null) {\n        if (stopReading === true) return\n        stopReading = true\n        stopError = error\n        operationsStream.push(null)\n      },\n      // TODO: support abort a single search?\n      // NOTE: the validation checks are synchronous and the callback/promise will\n      //       be resolved in the same tick. We might want to fix this in the future.\n      search (header, body, callback) {\n        if (stopReading === true) {\n          const error = stopError === null\n            ? new ConfigurationError('The msearch processor has been stopped')\n            : stopError\n          return callback ? callback(error, {}) : Promise.reject(error)\n        }\n\n        if (!(typeof header === 'object' && header !== null && !Array.isArray(header))) {\n          const error = new ConfigurationError('The header should be an object')\n          return callback ? callback(error, {}) : Promise.reject(error)\n        }\n\n        if (!(typeof body === 'object' && body !== null && !Array.isArray(body))) {\n          const error = new ConfigurationError('The body should be an object')\n          return callback ? callback(error, {}) : Promise.reject(error)\n        }\n\n        let promise = null\n        if (callback === undefined) {\n          let onFulfilled = null\n          let onRejected = null\n          promise = new Promise((resolve, reject) => {\n            onFulfilled = resolve\n            onRejected = reject\n          })\n          callback = function callback (err, result) {\n            err ? onRejected(err) : onFulfilled(result)\n          }\n        }\n\n        operationsStream.push([header, body, callback])\n\n        if (promise !== null) {\n          return promise\n        }\n      }\n    }\n\n    return helper\n\n    async function iterate () {\n      const { semaphore, finish } = buildSemaphore()\n      const msearchBody = []\n      const callbacks = []\n      let loadedOperations = 0\n      timeoutRef = setTimeout(onFlushTimeout, flushInterval)\n\n      for await (const operation of operationsStream) {\n        timeoutRef.refresh()\n        loadedOperations += 1\n        msearchBody.push(operation[0], operation[1])\n        callbacks.push(operation[2])\n        if (loadedOperations >= operations) {\n          const send = await semaphore()\n          send(msearchBody.slice(), callbacks.slice())\n          msearchBody.length = 0\n          callbacks.length = 0\n          loadedOperations = 0\n        }\n      }\n\n      clearTimeout(timeoutRef)\n      // In some cases the previos http call does not have finished,\n      // or we didn't reach the flush bytes threshold, so we force one last operation.\n      if (loadedOperations > 0) {\n        const send = await semaphore()\n        send(msearchBody, callbacks)\n      }\n\n      await finish()\n\n      if (stopError !== null) {\n        throw stopError\n      }\n\n      async function onFlushTimeout () {\n        if (loadedOperations === 0) return\n        const msearchBodyCopy = msearchBody.slice()\n        const callbacksCopy = callbacks.slice()\n        msearchBody.length = 0\n        callbacks.length = 0\n        loadedOperations = 0\n        try {\n          const send = await semaphore()\n          send(msearchBodyCopy, callbacksCopy)\n        } catch (err) {\n          /* istanbul ignore next */\n          helper.stop(err)\n        }\n      }\n    }\n\n    // This function builds a semaphore using the concurrency\n    // options of the msearch helper. It is used inside the iterator\n    // to guarantee that no more than the number of operations\n    // allowed to run at the same time are executed.\n    // It returns a semaphore function which resolves in the next tick\n    // if we didn't reach the maximim concurrency yet, otherwise it returns\n    // a promise that resolves as soon as one of the running request has finshed.\n    // The semaphore function resolves a send function, which will be used\n    // to send the actual msearch request.\n    // It also returns a finish function, which returns a promise that is resolved\n    // when there are no longer request running.\n    function buildSemaphore () {\n      let resolveSemaphore = null\n      let resolveFinish = null\n      let running = 0\n\n      return { semaphore, finish }\n\n      function finish () {\n        return new Promise((resolve, reject) => {\n          if (running === 0) {\n            resolve()\n          } else {\n            resolveFinish = resolve\n          }\n        })\n      }\n\n      function semaphore () {\n        if (running < concurrency) {\n          running += 1\n          return pImmediate(send)\n        } else {\n          return new Promise((resolve, reject) => {\n            resolveSemaphore = resolve\n          })\n        }\n      }\n\n      function send (msearchBody, callbacks) {\n        /* istanbul ignore if */\n        if (running > concurrency) {\n          throw new Error('Max concurrency reached')\n        }\n        msearchOperation(msearchBody, callbacks, () => {\n          running -= 1\n          if (resolveSemaphore) {\n            running += 1\n            resolveSemaphore(send)\n            resolveSemaphore = null\n          } else if (resolveFinish && running === 0) {\n            resolveFinish()\n          }\n        })\n      }\n    }\n\n    function msearchOperation (msearchBody, callbacks, done) {\n      let retryCount = retries\n\n      // Instead of going full on async-await, which would make the code easier to read,\n      // we have decided to use callback style instead.\n      // This because every time we use async await, V8 will create multiple promises\n      // behind the scenes, making the code slightly slower.\n      tryMsearch(msearchBody, callbacks, retrySearch)\n      function retrySearch (msearchBody, callbacks) {\n        if (msearchBody.length > 0 && retryCount > 0) {\n          retryCount -= 1\n          setTimeout(tryMsearch, wait, msearchBody, callbacks, retrySearch)\n          return\n        }\n\n        done()\n      }\n\n      // This function never returns an error, if the msearch operation fails,\n      // the error is dispatched to all search executors.\n      function tryMsearch (msearchBody, callbacks, done) {\n        client.msearch(Object.assign({}, msearchOptions, { body: msearchBody }), reqOptions, (err, results) => {\n          const retryBody = []\n          const retryCallbacks = []\n          if (err) {\n            addDocumentsGetter(results)\n            for (const callback of callbacks) {\n              callback(err, results)\n            }\n            return done(retryBody, retryCallbacks)\n          }\n          const { responses } = results.body\n          for (let i = 0, len = responses.length; i < len; i++) {\n            const response = responses[i]\n            if (response.status === 429 && retryCount > 0) {\n              retryBody.push(msearchBody[i * 2])\n              retryBody.push(msearchBody[(i * 2) + 1])\n              retryCallbacks.push(callbacks[i])\n              continue\n            }\n            const result = { ...results, body: response }\n            addDocumentsGetter(result)\n            if (response.status >= 400) {\n              callbacks[i](new ResponseError(result), result)\n            } else {\n              callbacks[i](null, result)\n            }\n          }\n          done(retryBody, retryCallbacks)\n        })\n      }\n    }\n  }\n\n  /**\n   * Creates a bulk helper instance. Once you configure it, you can pick which operation\n   * to execute with the given dataset, index, create, update, and delete.\n   * @param {object} options - The configuration of the bulk operation.\n   * @param {object} reqOptions - The client optional configuration for this request.\n   * @return {object} The possible operations to run with the datasource.\n   */\n  bulk (options, reqOptions = {}) {\n    const client = this[kClient]\n    const { serializer } = client\n    if (this[kMetaHeader] !== null) {\n      reqOptions.headers = reqOptions.headers || {}\n      reqOptions.headers['x-elastic-client-meta'] = this[kMetaHeader] + ',h=bp'\n    }\n    const {\n      datasource,\n      onDocument,\n      flushBytes = 5000000,\n      flushInterval = 30000,\n      concurrency = 5,\n      retries = this.maxRetries,\n      wait = 5000,\n      onDrop = noop,\n      refreshOnCompletion = false,\n      ...bulkOptions\n    } = options\n\n    if (datasource === undefined) {\n      return Promise.reject(new ConfigurationError('bulk helper: the datasource is required'))\n    }\n    if (!(Array.isArray(datasource) || Buffer.isBuffer(datasource) || typeof datasource.pipe === 'function' || datasource[Symbol.asyncIterator])) {\n      return Promise.reject(new ConfigurationError('bulk helper: the datasource must be an array or a buffer or a readable stream or an async generator'))\n    }\n    if (onDocument === undefined) {\n      return Promise.reject(new ConfigurationError('bulk helper: the onDocument callback is required'))\n    }\n\n    let shouldAbort = false\n    let timeoutRef = null\n    const stats = {\n      total: 0,\n      failed: 0,\n      retry: 0,\n      successful: 0,\n      noop: 0,\n      time: 0,\n      bytes: 0,\n      aborted: false\n    }\n\n    const p = iterate()\n    const helper = {\n      get stats () {\n        return stats\n      },\n      then (onFulfilled, onRejected) {\n        return p.then(onFulfilled, onRejected)\n      },\n      catch (onRejected) {\n        return p.catch(onRejected)\n      },\n      abort () {\n        clearTimeout(timeoutRef)\n        shouldAbort = true\n        stats.aborted = true\n        return this\n      }\n    }\n\n    return helper\n\n    /**\n     * Function that iterates over the given datasource and start a bulk operation as soon\n     * as it reaches the configured bulk size. It's designed to use the Node.js asynchronous\n     * model at this maximum capacity, as it will collect the next body to send while there is\n     * a running http call. In this way, the CPU time will be used carefully.\n     * The objects will be serialized right away, to approximate the byte length of the body.\n     * It creates an array of strings instead of a ndjson string because the bulkOperation\n     * will navigate the body for matching failed operations with the original document.\n     */\n    async function iterate () {\n      const { semaphore, finish } = buildSemaphore()\n      const startTime = Date.now()\n      const bulkBody = []\n      let actionBody = ''\n      let payloadBody = ''\n      let chunkBytes = 0\n      timeoutRef = setTimeout(onFlushTimeout, flushInterval)\n\n      for await (const chunk of datasource) {\n        if (shouldAbort === true) break\n        timeoutRef.refresh()\n        const action = onDocument(chunk)\n        const operation = Array.isArray(action)\n          ? Object.keys(action[0])[0]\n          : Object.keys(action)[0]\n        if (operation === 'index' || operation === 'create') {\n          actionBody = serializer.serialize(action)\n          payloadBody = typeof chunk === 'string' ? chunk : serializer.serialize(chunk)\n          chunkBytes += Buffer.byteLength(actionBody) + Buffer.byteLength(payloadBody)\n          bulkBody.push(actionBody, payloadBody)\n        } else if (operation === 'update') {\n          actionBody = serializer.serialize(action[0])\n          payloadBody = typeof chunk === 'string'\n            ? `{\"doc\":${chunk}}`\n            : serializer.serialize({ doc: chunk, ...action[1] })\n          chunkBytes += Buffer.byteLength(actionBody) + Buffer.byteLength(payloadBody)\n          bulkBody.push(actionBody, payloadBody)\n        } else if (operation === 'delete') {\n          actionBody = serializer.serialize(action)\n          chunkBytes += Buffer.byteLength(actionBody)\n          bulkBody.push(actionBody)\n        } else {\n          clearTimeout(timeoutRef)\n          throw new ConfigurationError(`Bulk helper invalid action: '${operation}'`)\n        }\n\n        if (chunkBytes >= flushBytes) {\n          stats.bytes += chunkBytes\n          const send = await semaphore()\n          send(bulkBody.slice())\n          bulkBody.length = 0\n          chunkBytes = 0\n        }\n      }\n\n      clearTimeout(timeoutRef)\n      // In some cases the previos http call does not have finished,\n      // or we didn't reach the flush bytes threshold, so we force one last operation.\n      if (shouldAbort === false && chunkBytes > 0) {\n        const send = await semaphore()\n        stats.bytes += chunkBytes\n        send(bulkBody)\n      }\n\n      await finish()\n\n      if (refreshOnCompletion) {\n        await client.indices.refresh({\n          index: typeof refreshOnCompletion === 'string'\n            ? refreshOnCompletion\n            : '_all'\n        }, reqOptions)\n      }\n\n      stats.time = Date.now() - startTime\n      stats.total = stats.successful + stats.failed\n\n      return stats\n\n      async function onFlushTimeout () {\n        if (chunkBytes === 0) return\n        stats.bytes += chunkBytes\n        const bulkBodyCopy = bulkBody.slice()\n        bulkBody.length = 0\n        chunkBytes = 0\n        try {\n          const send = await semaphore()\n          send(bulkBodyCopy)\n        } catch (err) {\n          /* istanbul ignore next */\n          helper.abort()\n        }\n      }\n    }\n\n    // This function builds a semaphore using the concurrency\n    // options of the bulk helper. It is used inside the iterator\n    // to guarantee that no more than the number of operations\n    // allowed to run at the same time are executed.\n    // It returns a semaphore function which resolves in the next tick\n    // if we didn't reach the maximim concurrency yet, otherwise it returns\n    // a promise that resolves as soon as one of the running request has finshed.\n    // The semaphore function resolves a send function, which will be used\n    // to send the actual bulk request.\n    // It also returns a finish function, which returns a promise that is resolved\n    // when there are no longer request running. It rejects an error if one\n    // of the request has failed for some reason.\n    function buildSemaphore () {\n      let resolveSemaphore = null\n      let resolveFinish = null\n      let rejectFinish = null\n      let error = null\n      let running = 0\n\n      return { semaphore, finish }\n\n      function finish () {\n        return new Promise((resolve, reject) => {\n          if (running === 0) {\n            if (error) {\n              reject(error)\n            } else {\n              resolve()\n            }\n          } else {\n            resolveFinish = resolve\n            rejectFinish = reject\n          }\n        })\n      }\n\n      function semaphore () {\n        if (running < concurrency) {\n          running += 1\n          return pImmediate(send)\n        } else {\n          return new Promise((resolve, reject) => {\n            resolveSemaphore = resolve\n          })\n        }\n      }\n\n      function send (bulkBody) {\n        /* istanbul ignore if */\n        if (running > concurrency) {\n          throw new Error('Max concurrency reached')\n        }\n        bulkOperation(bulkBody, err => {\n          running -= 1\n          if (err) {\n            shouldAbort = true\n            error = err\n          }\n          if (resolveSemaphore) {\n            running += 1\n            resolveSemaphore(send)\n            resolveSemaphore = null\n          } else if (resolveFinish && running === 0) {\n            if (error) {\n              rejectFinish(error)\n            } else {\n              resolveFinish()\n            }\n          }\n        })\n      }\n    }\n\n    function bulkOperation (bulkBody, callback) {\n      let retryCount = retries\n      let isRetrying = false\n\n      // Instead of going full on async-await, which would make the code easier to read,\n      // we have decided to use callback style instead.\n      // This because every time we use async await, V8 will create multiple promises\n      // behind the scenes, making the code slightly slower.\n      tryBulk(bulkBody, retryDocuments)\n      function retryDocuments (err, bulkBody) {\n        if (err) return callback(err)\n        if (shouldAbort === true) return callback()\n\n        if (bulkBody.length > 0) {\n          if (retryCount > 0) {\n            isRetrying = true\n            retryCount -= 1\n            stats.retry += bulkBody.length\n            setTimeout(tryBulk, wait, bulkBody, retryDocuments)\n            return\n          }\n          for (let i = 0, len = bulkBody.length; i < len; i = i + 2) {\n            const operation = Object.keys(serializer.deserialize(bulkBody[i]))[0]\n            onDrop({\n              status: 429,\n              error: null,\n              operation: serializer.deserialize(bulkBody[i]),\n              document: operation !== 'delete'\n                ? serializer.deserialize(bulkBody[i + 1])\n                /* istanbul ignore next */\n                : null,\n              retried: isRetrying\n            })\n            stats.failed += 1\n          }\n        }\n        callback()\n      }\n\n      function tryBulk (bulkBody, callback) {\n        if (shouldAbort === true) return callback(null, [])\n        client.bulk(Object.assign({}, bulkOptions, { body: bulkBody }), reqOptions, (err, { body }) => {\n          if (err) return callback(err, null)\n          if (body.errors === false) {\n            stats.successful += body.items.length\n            for (const item of body.items) {\n              if (item.update && item.update.result === 'noop') {\n                stats.noop++\n              }\n            }\n            return callback(null, [])\n          }\n          const retry = []\n          const { items } = body\n          for (let i = 0, len = items.length; i < len; i++) {\n            const action = items[i]\n            const operation = Object.keys(action)[0]\n            const { status } = action[operation]\n            const indexSlice = operation !== 'delete' ? i * 2 : i\n\n            if (status >= 400) {\n              // 429 is the only staus code where we might want to retry\n              // a document, because it was not an error in the document itself,\n              // but the ES node were handling too many operations.\n              if (status === 429) {\n                retry.push(bulkBody[indexSlice])\n                /* istanbul ignore next */\n                if (operation !== 'delete') {\n                  retry.push(bulkBody[indexSlice + 1])\n                }\n              } else {\n                onDrop({\n                  status: status,\n                  error: action[operation].error,\n                  operation: serializer.deserialize(bulkBody[indexSlice]),\n                  document: operation !== 'delete'\n                    ? serializer.deserialize(bulkBody[indexSlice + 1])\n                    : null,\n                  retried: isRetrying\n                })\n                stats.failed += 1\n              }\n            } else {\n              stats.successful += 1\n            }\n          }\n          callback(null, retry)\n        })\n      }\n    }\n  }\n}\n\n// Using a getter will improve the overall performances of the code,\n// as we will reed the documents only if needed.\nfunction addDocumentsGetter (result) {\n  Object.defineProperty(result, 'documents', {\n    get () {\n      if (this.body.hits && this.body.hits.hits) {\n        return this.body.hits.hits.map(d => d._source)\n      }\n      return []\n    }\n  })\n}\n\nfunction appendFilterPath (filter, params, force) {\n  if (params.filter_path !== undefined) {\n    params.filter_path += ',' + filter\n  } else if (params.filterPath !== undefined) {\n    params.filterPath += ',' + filter\n  } else if (force === true) {\n    params.filter_path = filter\n  }\n}\n\nmodule.exports = Helpers\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst { stringify } = require('querystring')\nconst debug = require('debug')('elasticsearch')\nconst sjson = require('secure-json-parse')\nconst { SerializationError, DeserializationError } = require('./errors')\nconst kJsonOptions = Symbol('secure json parse options')\n\nclass Serializer {\n  constructor (opts = {}) {\n    const disable = opts.disablePrototypePoisoningProtection\n    this[kJsonOptions] = {\n      protoAction: disable === true || disable === 'proto' ? 'ignore' : 'error',\n      constructorAction: disable === true || disable === 'constructor' ? 'ignore' : 'error'\n    }\n  }\n\n  serialize (object) {\n    debug('Serializing', object)\n    let json\n    try {\n      json = JSON.stringify(object)\n    } catch (err) {\n      throw new SerializationError(err.message, object)\n    }\n    return json\n  }\n\n  deserialize (json) {\n    debug('Deserializing', json)\n    let object\n    try {\n      object = sjson.parse(json, this[kJsonOptions])\n    } catch (err) {\n      throw new DeserializationError(err.message, json)\n    }\n    return object\n  }\n\n  ndserialize (array) {\n    debug('ndserialize', array)\n    if (Array.isArray(array) === false) {\n      throw new SerializationError('The argument provided is not an array')\n    }\n    let ndjson = ''\n    for (let i = 0, len = array.length; i < len; i++) {\n      if (typeof array[i] === 'string') {\n        ndjson += array[i] + '\\n'\n      } else {\n        ndjson += this.serialize(array[i]) + '\\n'\n      }\n    }\n    return ndjson\n  }\n\n  qserialize (object) {\n    debug('qserialize', object)\n    if (object == null) return ''\n    if (typeof object === 'string') return object\n    // arrays should be serialized as comma separated list\n    const keys = Object.keys(object)\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const key = keys[i]\n      // elasticsearch will complain for keys without a value\n      if (object[key] === undefined) {\n        delete object[key]\n      } else if (Array.isArray(object[key]) === true) {\n        object[key] = object[key].join(',')\n      }\n    }\n    return stringify(object)\n  }\n}\n\nmodule.exports = Serializer\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst debug = require('debug')('elasticsearch')\nconst os = require('os')\nconst { gzip, unzip, createGzip } = require('zlib')\nconst buffer = require('buffer')\nconst ms = require('ms')\nconst { EventEmitter } = require('events')\nconst {\n  ConnectionError,\n  RequestAbortedError,\n  NoLivingConnectionsError,\n  ResponseError,\n  ConfigurationError,\n  ProductNotSupportedError\n} = require('./errors')\n\nconst noop = () => {}\n\nconst clientVersion = require('../package.json').version\nconst userAgent = `elasticsearch-js/${clientVersion} (${os.platform()} ${os.release()}-${os.arch()}; Node.js ${process.version})`\nconst MAX_BUFFER_LENGTH = buffer.constants.MAX_LENGTH\nconst MAX_STRING_LENGTH = buffer.constants.MAX_STRING_LENGTH\nconst kProductCheck = Symbol('product check')\nconst kApiVersioning = Symbol('api versioning')\nconst kEventEmitter = Symbol('event emitter')\n\nclass Transport {\n  constructor (opts) {\n    if (typeof opts.compression === 'string' && opts.compression !== 'gzip') {\n      throw new ConfigurationError(`Invalid compression: '${opts.compression}'`)\n    }\n\n    this.emit = opts.emit\n    this.connectionPool = opts.connectionPool\n    this.serializer = opts.serializer\n    this.maxRetries = opts.maxRetries\n    this.requestTimeout = toMs(opts.requestTimeout)\n    this.suggestCompression = opts.suggestCompression === true\n    this.compression = opts.compression || false\n    this.context = opts.context || null\n    this.headers = Object.assign({},\n      { 'user-agent': userAgent },\n      opts.suggestCompression === true ? { 'accept-encoding': 'gzip,deflate' } : null,\n      lowerCaseHeaders(opts.headers)\n    )\n    this.sniffInterval = opts.sniffInterval\n    this.sniffOnConnectionFault = opts.sniffOnConnectionFault\n    this.sniffEndpoint = opts.sniffEndpoint\n    this.generateRequestId = opts.generateRequestId || generateRequestId()\n    this.name = opts.name\n    this.opaqueIdPrefix = opts.opaqueIdPrefix\n    this[kProductCheck] = 0 // 0 = to be checked, 1 = checking, 2 = checked-ok, 3 checked-notok, 4 checked-nodefault\n    this[kApiVersioning] = process.env.ELASTIC_CLIENT_APIVERSIONING === 'true'\n    this[kEventEmitter] = new EventEmitter()\n\n    this.nodeFilter = opts.nodeFilter || defaultNodeFilter\n    if (typeof opts.nodeSelector === 'function') {\n      this.nodeSelector = opts.nodeSelector\n    } else if (opts.nodeSelector === 'round-robin') {\n      this.nodeSelector = roundRobinSelector()\n    } else if (opts.nodeSelector === 'random') {\n      this.nodeSelector = randomSelector\n    } else {\n      this.nodeSelector = roundRobinSelector()\n    }\n\n    this._sniffEnabled = typeof this.sniffInterval === 'number'\n    this._nextSniff = this._sniffEnabled ? (Date.now() + this.sniffInterval) : 0\n    this._isSniffing = false\n\n    if (opts.sniffOnStart === true) {\n      // timer needed otherwise it will clash\n      // with the product check testing\n      setTimeout(() => {\n        this.sniff({ reason: Transport.sniffReasons.SNIFF_ON_START })\n      }, 10)\n    }\n  }\n\n  request (params, options, callback) {\n    options = options || {}\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    let p = null\n\n    // promises support\n    if (callback === undefined) {\n      let onFulfilled = null\n      let onRejected = null\n      p = new Promise((resolve, reject) => {\n        onFulfilled = resolve\n        onRejected = reject\n      })\n      callback = function callback (err, result) {\n        err ? onRejected(err) : onFulfilled(result)\n      }\n    }\n\n    const meta = {\n      context: null,\n      request: {\n        params: null,\n        options: null,\n        id: options.id || this.generateRequestId(params, options)\n      },\n      name: this.name,\n      connection: null,\n      attempts: 0,\n      aborted: false\n    }\n\n    if (this.context != null && options.context != null) {\n      meta.context = Object.assign({}, this.context, options.context)\n    } else if (this.context != null) {\n      meta.context = this.context\n    } else if (options.context != null) {\n      meta.context = options.context\n    }\n\n    const result = {\n      body: null,\n      statusCode: null,\n      headers: null,\n      meta\n    }\n\n    Object.defineProperty(result, 'warnings', {\n      get () {\n        return this.headers && this.headers.warning\n          ? this.headers.warning.split(/(?!\\B\"[^\"]*),(?![^\"]*\"\\B)/)\n          : null\n      }\n    })\n\n    // We should not retry if we are sending a stream body, because we should store in memory\n    // a copy of the stream to be able to send it again, but since we don't know in advance\n    // the size of the stream, we risk to take too much memory.\n    // Furthermore, copying everytime the stream is very a expensive operation.\n    const maxRetries = isStream(params.body) || isStream(params.bulkBody)\n      ? 0\n      : (typeof options.maxRetries === 'number' ? options.maxRetries : this.maxRetries)\n    const compression = options.compression !== undefined ? options.compression : this.compression\n    let request = { abort: noop }\n    const transportReturn = {\n      then (onFulfilled, onRejected) {\n        return p.then(onFulfilled, onRejected)\n      },\n      catch (onRejected) {\n        return p.catch(onRejected)\n      },\n      abort () {\n        meta.aborted = true\n        request.abort()\n        debug('Aborting request', params)\n        return this\n      },\n      finally (onFinally) {\n        return p.finally(onFinally)\n      }\n    }\n\n    const makeRequest = () => {\n      if (meta.aborted === true) {\n        this.emit('request', new RequestAbortedError(), result)\n        return process.nextTick(callback, new RequestAbortedError(), result)\n      }\n      meta.connection = this.getConnection({ requestId: meta.request.id })\n      if (meta.connection == null) {\n        return process.nextTick(callback, new NoLivingConnectionsError(), result)\n      }\n      this.emit('request', null, result)\n      // perform the actual http request\n      request = meta.connection.request(params, onResponse)\n    }\n\n    const onConnectionError = (err) => {\n      if (err.name !== 'RequestAbortedError') {\n        // if there is an error in the connection\n        // let's mark the connection as dead\n        this.connectionPool.markDead(meta.connection)\n\n        if (this.sniffOnConnectionFault === true) {\n          this.sniff({\n            reason: Transport.sniffReasons.SNIFF_ON_CONNECTION_FAULT,\n            requestId: meta.request.id\n          })\n        }\n\n        // retry logic\n        if (meta.attempts < maxRetries) {\n          meta.attempts++\n          debug(`Retrying request, there are still ${maxRetries - meta.attempts} attempts`, params)\n          makeRequest()\n          return\n        }\n      }\n\n      err.meta = result\n      this.emit('response', err, result)\n      return callback(err, result)\n    }\n\n    const onResponse = (err, response) => {\n      if (err !== null) {\n        return onConnectionError(err)\n      }\n\n      result.statusCode = response.statusCode\n      result.headers = response.headers\n\n      if (options.asStream === true) {\n        result.body = response\n        this.emit('response', null, result)\n        callback(null, result)\n        return\n      }\n\n      const contentEncoding = (result.headers['content-encoding'] || '').toLowerCase()\n      const isCompressed = contentEncoding.indexOf('gzip') > -1 || contentEncoding.indexOf('deflate') > -1\n      const isVectorTile = (result.headers['content-type'] || '').indexOf('application/vnd.mapbox-vector-tile') > -1\n\n      /* istanbul ignore else */\n      if (result.headers['content-length'] !== undefined) {\n        const contentLength = Number(result.headers['content-length'])\n        if (isCompressed && contentLength > MAX_BUFFER_LENGTH) {\n          response.destroy()\n          return onConnectionError(\n            new RequestAbortedError(`The content length (${contentLength}) is bigger than the maximum allowed buffer (${MAX_BUFFER_LENGTH})`, result)\n          )\n        } else if (contentLength > MAX_STRING_LENGTH) {\n          response.destroy()\n          return onConnectionError(\n            new RequestAbortedError(`The content length (${contentLength}) is bigger than the maximum allowed string (${MAX_STRING_LENGTH})`, result)\n          )\n        }\n      }\n      // if the response is compressed, we must handle it\n      // as buffer for allowing decompression later\n      // while if it's a vector tile, we should return it as buffer\n      let payload = isCompressed || isVectorTile ? [] : ''\n      const onData = isCompressed || isVectorTile\n        ? chunk => { payload.push(chunk) }\n        : chunk => { payload += chunk }\n      const onEnd = err => {\n        response.removeListener('data', onData)\n        response.removeListener('end', onEnd)\n        response.removeListener('error', onEnd)\n        response.removeListener('aborted', onAbort)\n\n        if (err) {\n          return onConnectionError(new ConnectionError(err.message))\n        }\n\n        if (isCompressed) {\n          unzip(Buffer.concat(payload), onBody)\n        } else {\n          onBody(null, isVectorTile ? Buffer.concat(payload) : payload)\n        }\n      }\n\n      const onAbort = () => {\n        response.destroy()\n        onEnd(new Error('Response aborted while reading the body'))\n      }\n\n      if (!isCompressed && !isVectorTile) {\n        response.setEncoding('utf8')\n      }\n\n      this.emit('deserialization', null, result)\n      response.on('data', onData)\n      response.on('error', onEnd)\n      response.on('end', onEnd)\n      response.on('aborted', onAbort)\n    }\n\n    const onBody = (err, payload) => {\n      if (err) {\n        this.emit('response', err, result)\n        return callback(err, result)\n      }\n\n      const isVectorTile = (result.headers['content-type'] || '').indexOf('application/vnd.mapbox-vector-tile') > -1\n      if (Buffer.isBuffer(payload) && !isVectorTile) {\n        payload = payload.toString()\n      }\n      const isHead = params.method === 'HEAD'\n      // we should attempt the payload deserialization only if:\n      //    - a `content-type` is defined and is equal to `application/json`\n      //    - the request is not a HEAD request\n      //    - the payload is not an empty string\n      if (result.headers['content-type'] !== undefined &&\n          (result.headers['content-type'].indexOf('application/json') > -1 ||\n          result.headers['content-type'].indexOf('application/vnd.elasticsearch+json') > -1) &&\n          isHead === false &&\n          payload !== ''\n      ) {\n        try {\n          result.body = this.serializer.deserialize(payload)\n        } catch (err) {\n          this.emit('response', err, result)\n          return callback(err, result)\n        }\n      } else {\n        // cast to boolean if the request method was HEAD and there was no error\n        result.body = isHead === true && result.statusCode < 400 ? true : payload\n      }\n\n      // we should ignore the statusCode if the user has configured the `ignore` field with\n      // the statusCode we just got or if the request method is HEAD and the statusCode is 404\n      const ignoreStatusCode = (Array.isArray(options.ignore) && options.ignore.indexOf(result.statusCode) > -1) ||\n        (isHead === true && result.statusCode === 404)\n\n      if (ignoreStatusCode === false &&\n         (result.statusCode === 502 || result.statusCode === 503 || result.statusCode === 504)) {\n        // if the statusCode is 502/3/4 we should run our retry strategy\n        // and mark the connection as dead\n        this.connectionPool.markDead(meta.connection)\n        // retry logic (we shoukd not retry on \"429 - Too Many Requests\")\n        if (meta.attempts < maxRetries && result.statusCode !== 429) {\n          meta.attempts++\n          debug(`Retrying request, there are still ${maxRetries - meta.attempts} attempts`, params)\n          makeRequest()\n          return\n        }\n      } else {\n        // everything has worked as expected, let's mark\n        // the connection as alive (or confirm it)\n        this.connectionPool.markAlive(meta.connection)\n      }\n\n      if (ignoreStatusCode === false && result.statusCode >= 400) {\n        const error = new ResponseError(result)\n        this.emit('response', error, result)\n        callback(error, result)\n      } else {\n        // cast to boolean if the request method was HEAD\n        if (isHead === true && result.statusCode === 404) {\n          result.body = false\n        }\n        this.emit('response', null, result)\n        callback(null, result)\n      }\n    }\n\n    const prepareRequest = () => {\n      this.emit('serialization', null, result)\n      const headers = Object.assign({}, this.headers, lowerCaseHeaders(options.headers))\n\n      if (options.opaqueId !== undefined) {\n        headers['x-opaque-id'] = this.opaqueIdPrefix !== null\n          ? this.opaqueIdPrefix + options.opaqueId\n          : options.opaqueId\n      }\n\n      // handle json body\n      if (params.body != null) {\n        if (shouldSerialize(params.body) === true) {\n          try {\n            params.body = this.serializer.serialize(params.body)\n          } catch (err) {\n            this.emit('request', err, result)\n            process.nextTick(callback, err, result)\n            return transportReturn\n          }\n        }\n\n        if (params.body !== '') {\n          headers['content-type'] = headers['content-type'] || (this[kApiVersioning] ? 'application/vnd.elasticsearch+json; compatible-with=7' : 'application/json')\n        }\n\n      // handle ndjson body\n      } else if (params.bulkBody != null) {\n        if (shouldSerialize(params.bulkBody) === true) {\n          try {\n            params.body = this.serializer.ndserialize(params.bulkBody)\n          } catch (err) {\n            this.emit('request', err, result)\n            process.nextTick(callback, err, result)\n            return transportReturn\n          }\n        } else {\n          params.body = params.bulkBody\n        }\n        if (params.body !== '') {\n          headers['content-type'] = headers['content-type'] || (this[kApiVersioning] ? 'application/vnd.elasticsearch+x-ndjson; compatible-with=7' : 'application/x-ndjson')\n        }\n      }\n\n      params.headers = headers\n      // serializes the querystring\n      if (options.querystring == null) {\n        params.querystring = this.serializer.qserialize(params.querystring)\n      } else {\n        params.querystring = this.serializer.qserialize(\n          Object.assign({}, params.querystring, options.querystring)\n        )\n      }\n\n      // handles request timeout\n      params.timeout = toMs(options.requestTimeout || this.requestTimeout)\n      if (options.asStream === true) params.asStream = true\n\n      // handle compression\n      if (params.body !== '' && params.body != null) {\n        if (isStream(params.body) === true) {\n          if (compression === 'gzip') {\n            params.headers['content-encoding'] = compression\n            params.body = params.body.pipe(createGzip())\n          }\n          makeRequest()\n        } else if (compression === 'gzip') {\n          gzip(params.body, (err, buffer) => {\n            /* istanbul ignore next */\n            if (err) {\n              this.emit('request', err, result)\n              return callback(err, result)\n            }\n            params.headers['content-encoding'] = compression\n            params.headers['content-length'] = '' + Buffer.byteLength(buffer)\n            params.body = buffer\n            makeRequest()\n          })\n        } else {\n          params.headers['content-length'] = '' + Buffer.byteLength(params.body)\n          makeRequest()\n        }\n      } else {\n        makeRequest()\n      }\n    }\n\n    meta.request.params = params\n    meta.request.options = options\n    // still need to check the product or waiting for the check to finish\n    if (this[kProductCheck] === 0 || this[kProductCheck] === 1) {\n      // let pass info requests\n      if (params.method === 'GET' && params.path === '/') {\n        prepareRequest()\n      } else {\n        // wait for product check to finish\n        this[kEventEmitter].once('product-check', (error, status) => {\n          if (status === false) {\n            const err = error || new ProductNotSupportedError(result)\n            if (this[kProductCheck] === 4) {\n              err.message = 'The client noticed that the server is not a supported distribution of Elasticsearch'\n            }\n            this.emit('request', err, result)\n            process.nextTick(callback, err, result)\n          } else {\n            prepareRequest()\n          }\n        })\n        // the very first request triggers the product check\n        if (this[kProductCheck] === 0) {\n          this.productCheck()\n        }\n      }\n    // the product check is finished and it's not Elasticsearch\n    } else if (this[kProductCheck] === 3 || this[kProductCheck] === 4) {\n      const err = new ProductNotSupportedError(result)\n      if (this[kProductCheck] === 4) {\n        err.message = 'The client noticed that the server is not a supported distribution of Elasticsearch'\n      }\n      this.emit('request', err, result)\n      process.nextTick(callback, err, result)\n    // the product check finished and it's Elasticsearch\n    } else {\n      prepareRequest()\n    }\n\n    return transportReturn\n  }\n\n  getConnection (opts) {\n    const now = Date.now()\n    if (this._sniffEnabled === true && now > this._nextSniff) {\n      this.sniff({ reason: Transport.sniffReasons.SNIFF_INTERVAL, requestId: opts.requestId })\n    }\n    return this.connectionPool.getConnection({\n      filter: this.nodeFilter,\n      selector: this.nodeSelector,\n      requestId: opts.requestId,\n      name: this.name,\n      now\n    })\n  }\n\n  sniff (opts, callback = noop) {\n    if (this._isSniffing === true) return\n    this._isSniffing = true\n    debug('Started sniffing request')\n\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = { reason: Transport.sniffReasons.DEFAULT }\n    }\n\n    const { reason } = opts\n\n    const request = {\n      method: 'GET',\n      path: this.sniffEndpoint\n    }\n\n    this.request(request, { id: opts.requestId }, (err, result) => {\n      this._isSniffing = false\n      if (this._sniffEnabled === true) {\n        this._nextSniff = Date.now() + this.sniffInterval\n      }\n\n      if (err != null) {\n        debug('Sniffing errored', err)\n        result.meta.sniff = { hosts: [], reason }\n        this.emit('sniff', err, result)\n        return callback(err)\n      }\n\n      debug('Sniffing ended successfully', result.body)\n      const protocol = result.meta.connection.url.protocol || /* istanbul ignore next */ 'http:'\n      const hosts = this.connectionPool.nodesToHost(result.body.nodes, protocol)\n      this.connectionPool.update(hosts)\n\n      result.meta.sniff = { hosts, reason }\n      this.emit('sniff', null, result)\n      callback(null, hosts)\n    })\n  }\n\n  productCheck () {\n    debug('Start product check')\n    this[kProductCheck] = 1\n    this.request({\n      method: 'GET',\n      path: '/'\n    }, (err, result) => {\n      this[kProductCheck] = 3\n      if (err) {\n        debug('Product check failed', err)\n        if (err.statusCode === 401 || err.statusCode === 403) {\n          this[kProductCheck] = 2\n          process.emitWarning(\n            'The client is unable to verify that the server is Elasticsearch due to security privileges on the server side. Some functionality may not be compatible if the server is running an unsupported product.',\n            'ProductNotSupportedSecurityError'\n          )\n          this[kEventEmitter].emit('product-check', null, true)\n        } else {\n          this[kProductCheck] = 0\n          this[kEventEmitter].emit('product-check', err, false)\n        }\n      } else {\n        debug('Checking elasticsearch version', result.body, result.headers)\n        if (result.body.version == null || typeof result.body.version.number !== 'string') {\n          debug('Can\\'t access Elasticsearch version')\n          return this[kEventEmitter].emit('product-check', null, false)\n        }\n        const tagline = result.body.tagline\n        const version = result.body.version.number.split('.')\n        const major = Number(version[0])\n        const minor = Number(version[1])\n        if (major < 6) {\n          return this[kEventEmitter].emit('product-check', null, false)\n        } else if (major >= 6 && major < 7) {\n          if (tagline !== 'You Know, for Search') {\n            debug('Bad tagline')\n            return this[kEventEmitter].emit('product-check', null, false)\n          }\n        } else if (major === 7 && minor < 14) {\n          if (tagline !== 'You Know, for Search') {\n            debug('Bad tagline')\n            return this[kEventEmitter].emit('product-check', null, false)\n          }\n\n          if (result.body.version.build_flavor !== 'default') {\n            debug('Bad build_flavor')\n            this[kProductCheck] = 4\n            return this[kEventEmitter].emit('product-check', null, false)\n          }\n        } else {\n          if (result.headers['x-elastic-product'] !== 'Elasticsearch') {\n            debug('x-elastic-product not recognized')\n            return this[kEventEmitter].emit('product-check', null, false)\n          }\n        }\n        debug('Valid Elasticsearch distribution')\n        this[kProductCheck] = 2\n        this[kEventEmitter].emit('product-check', null, true)\n      }\n    })\n  }\n}\n\nTransport.sniffReasons = {\n  SNIFF_ON_START: 'sniff-on-start',\n  SNIFF_INTERVAL: 'sniff-interval',\n  SNIFF_ON_CONNECTION_FAULT: 'sniff-on-connection-fault',\n  // TODO: find a better name\n  DEFAULT: 'default'\n}\n\nfunction toMs (time) {\n  if (typeof time === 'string') {\n    return ms(time)\n  }\n  return time\n}\n\nfunction shouldSerialize (obj) {\n  return typeof obj !== 'string' &&\n         typeof obj.pipe !== 'function' &&\n         Buffer.isBuffer(obj) === false\n}\n\nfunction isStream (obj) {\n  return obj != null && typeof obj.pipe === 'function'\n}\n\nfunction defaultNodeFilter (node) {\n  // avoid master only nodes\n  if (node.roles.master === true &&\n      node.roles.data === false &&\n      node.roles.ingest === false) {\n    return false\n  }\n  return true\n}\n\nfunction roundRobinSelector () {\n  let current = -1\n  return function _roundRobinSelector (connections) {\n    if (++current >= connections.length) {\n      current = 0\n    }\n    return connections[current]\n  }\n}\n\nfunction randomSelector (connections) {\n  const index = Math.floor(Math.random() * connections.length)\n  return connections[index]\n}\n\nfunction generateRequestId () {\n  const maxInt = 2147483647\n  let nextReqId = 0\n  return function genReqId (params, options) {\n    return (nextReqId = (nextReqId + 1) & maxInt)\n  }\n}\n\nfunction lowerCaseHeaders (oldHeaders) {\n  if (oldHeaders == null) return oldHeaders\n  const newHeaders = {}\n  for (const header in oldHeaders) {\n    newHeaders[header.toLowerCase()] = oldHeaders[header]\n  }\n  return newHeaders\n}\n\nmodule.exports = Transport\nmodule.exports.internals = {\n  defaultNodeFilter,\n  roundRobinSelector,\n  randomSelector,\n  generateRequestId,\n  lowerCaseHeaders\n}\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nclass ElasticsearchClientError extends Error {\n  constructor (message) {\n    super(message)\n    this.name = 'ElasticsearchClientError'\n  }\n}\n\nclass TimeoutError extends ElasticsearchClientError {\n  constructor (message, meta) {\n    super(message)\n    Error.captureStackTrace(this, TimeoutError)\n    this.name = 'TimeoutError'\n    this.message = message || 'Timeout Error'\n    this.meta = meta\n  }\n}\n\nclass ConnectionError extends ElasticsearchClientError {\n  constructor (message, meta) {\n    super(message)\n    Error.captureStackTrace(this, ConnectionError)\n    this.name = 'ConnectionError'\n    this.message = message || 'Connection Error'\n    this.meta = meta\n  }\n}\n\nclass NoLivingConnectionsError extends ElasticsearchClientError {\n  constructor (message, meta) {\n    super(message)\n    Error.captureStackTrace(this, NoLivingConnectionsError)\n    this.name = 'NoLivingConnectionsError'\n    this.message = message || 'Given the configuration, the ConnectionPool was not able to find a usable Connection for this request.'\n    this.meta = meta\n  }\n}\n\nclass SerializationError extends ElasticsearchClientError {\n  constructor (message, data) {\n    super(message, data)\n    Error.captureStackTrace(this, SerializationError)\n    this.name = 'SerializationError'\n    this.message = message || 'Serialization Error'\n    this.data = data\n  }\n}\n\nclass DeserializationError extends ElasticsearchClientError {\n  constructor (message, data) {\n    super(message, data)\n    Error.captureStackTrace(this, DeserializationError)\n    this.name = 'DeserializationError'\n    this.message = message || 'Deserialization Error'\n    this.data = data\n  }\n}\n\nclass ConfigurationError extends ElasticsearchClientError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ConfigurationError)\n    this.name = 'ConfigurationError'\n    this.message = message || 'Configuration Error'\n  }\n}\n\nclass ResponseError extends ElasticsearchClientError {\n  constructor (meta) {\n    super('Response Error')\n    Error.captureStackTrace(this, ResponseError)\n    this.name = 'ResponseError'\n    if (meta.body && meta.body.error && meta.body.error.type) {\n      if (Array.isArray(meta.body.error.root_cause)) {\n        this.message = meta.body.error.type + ': '\n        this.message += meta.body.error.root_cause.map(entry => `[${entry.type}] Reason: ${entry.reason}`).join('; ')\n      } else {\n        this.message = meta.body.error.type\n      }\n    } else if (typeof meta.body === 'object' && meta.body != null) {\n      this.message = JSON.stringify(meta.body)\n    } else {\n      this.message = meta.body || 'Response Error'\n    }\n    this.meta = meta\n  }\n\n  get body () {\n    return this.meta.body\n  }\n\n  get statusCode () {\n    if (this.meta.body && typeof this.meta.body.status === 'number') {\n      return this.meta.body.status\n    }\n    return this.meta.statusCode\n  }\n\n  get headers () {\n    return this.meta.headers\n  }\n\n  toString () {\n    return JSON.stringify(this.meta.body)\n  }\n}\n\nclass RequestAbortedError extends ElasticsearchClientError {\n  constructor (message, meta) {\n    super(message)\n    Error.captureStackTrace(this, RequestAbortedError)\n    this.name = 'RequestAbortedError'\n    this.message = message || 'Request aborted'\n    this.meta = meta\n  }\n}\n\nclass ProductNotSupportedError extends ElasticsearchClientError {\n  constructor (meta) {\n    super('Product Not Supported Error')\n    Error.captureStackTrace(this, ProductNotSupportedError)\n    this.name = 'ProductNotSupportedError'\n    this.message = 'The client noticed that the server is not Elasticsearch and we do not support this unknown product.'\n    this.meta = meta\n  }\n}\n\nmodule.exports = {\n  ElasticsearchClientError,\n  TimeoutError,\n  ConnectionError,\n  NoLivingConnectionsError,\n  SerializationError,\n  DeserializationError,\n  ConfigurationError,\n  ResponseError,\n  RequestAbortedError,\n  ProductNotSupportedError\n}\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst { URL } = require('url')\nconst debug = require('debug')('elasticsearch')\nconst Connection = require('../Connection')\nconst noop = () => {}\n\nclass BaseConnectionPool {\n  constructor (opts) {\n    // list of nodes and weights\n    this.connections = []\n    // how many nodes we have in our scheduler\n    this.size = this.connections.length\n    this.Connection = opts.Connection\n    this.emit = opts.emit || noop\n    this.auth = opts.auth || null\n    this._ssl = opts.ssl\n    this._agent = opts.agent\n    this._proxy = opts.proxy || null\n    this._caFingerprint = opts.caFingerprint || null\n  }\n\n  getConnection () {\n    throw new Error('getConnection must be implemented')\n  }\n\n  markAlive () {\n    return this\n  }\n\n  markDead () {\n    return this\n  }\n\n  /**\n   * Creates a new connection instance.\n   */\n  createConnection (opts) {\n    if (typeof opts === 'string') {\n      opts = this.urlToHost(opts)\n    }\n\n    if (this.auth !== null) {\n      opts.auth = this.auth\n    } else if (opts.url.username !== '' && opts.url.password !== '') {\n      opts.auth = {\n        username: decodeURIComponent(opts.url.username),\n        password: decodeURIComponent(opts.url.password)\n      }\n    }\n\n    if (opts.ssl == null) opts.ssl = this._ssl\n    /* istanbul ignore else */\n    if (opts.agent == null) opts.agent = this._agent\n    /* istanbul ignore else */\n    if (opts.proxy == null) opts.proxy = this._proxy\n    /* istanbul ignore else */\n    if (opts.caFingerprint == null) opts.caFingerprint = this._caFingerprint\n\n    const connection = new this.Connection(opts)\n\n    for (const conn of this.connections) {\n      if (conn.id === connection.id) {\n        throw new Error(`Connection with id '${connection.id}' is already present`)\n      }\n    }\n\n    return connection\n  }\n\n  /**\n   * Adds a new connection to the pool.\n   *\n   * @param {object|string} host\n   * @returns {ConnectionPool}\n   */\n  addConnection (opts) {\n    if (Array.isArray(opts)) {\n      return opts.forEach(o => this.addConnection(o))\n    }\n\n    if (typeof opts === 'string') {\n      opts = this.urlToHost(opts)\n    }\n\n    const connectionById = this.connections.find(c => c.id === opts.id)\n    const connectionByUrl = this.connections.find(c => c.id === opts.url.href)\n\n    if (connectionById || connectionByUrl) {\n      throw new Error(`Connection with id '${opts.id || opts.url.href}' is already present`)\n    }\n\n    this.update([...this.connections, opts])\n    return this.connections[this.size - 1]\n  }\n\n  /**\n   * Removes a new connection to the pool.\n   *\n   * @param {object} connection\n   * @returns {ConnectionPool}\n   */\n  removeConnection (connection) {\n    debug('Removing connection', connection)\n    return this.update(this.connections.filter(c => c.id !== connection.id))\n  }\n\n  /**\n   * Empties the connection pool.\n   *\n   * @returns {ConnectionPool}\n   */\n  empty (callback) {\n    debug('Emptying the connection pool')\n    let openConnections = this.size\n    this.connections.forEach(connection => {\n      connection.close(() => {\n        if (--openConnections === 0) {\n          this.connections = []\n          this.size = this.connections.length\n          callback()\n        }\n      })\n    })\n  }\n\n  /**\n   * Update the ConnectionPool with new connections.\n   *\n   * @param {array} array of connections\n   * @returns {ConnectionPool}\n   */\n  update (nodes) {\n    debug('Updating the connection pool')\n    const newConnections = []\n    const oldConnections = []\n\n    for (const node of nodes) {\n      // if we already have a given connection in the pool\n      // we mark it as alive and we do not close the connection\n      // to avoid socket issues\n      const connectionById = this.connections.find(c => c.id === node.id)\n      const connectionByUrl = this.connections.find(c => c.id === node.url.href)\n      if (connectionById) {\n        debug(`The connection with id '${node.id}' is already present`)\n        this.markAlive(connectionById)\n        newConnections.push(connectionById)\n      // in case the user has passed a single url (or an array of urls),\n      // the connection id will be the full href; to avoid closing valid connections\n      // because are not present in the pool, we check also the node url,\n      // and if is already present we update its id with the ES provided one.\n      } else if (connectionByUrl) {\n        connectionByUrl.id = node.id\n        this.markAlive(connectionByUrl)\n        newConnections.push(connectionByUrl)\n      } else {\n        newConnections.push(this.createConnection(node))\n      }\n    }\n\n    const ids = nodes.map(c => c.id)\n    // remove all the dead connections and old connections\n    for (const connection of this.connections) {\n      if (ids.indexOf(connection.id) === -1) {\n        oldConnections.push(connection)\n      }\n    }\n\n    // close old connections\n    oldConnections.forEach(connection => connection.close())\n\n    this.connections = newConnections\n    this.size = this.connections.length\n\n    return this\n  }\n\n  /**\n   * Transforms the nodes objects to a host object.\n   *\n   * @param {object} nodes\n   * @returns {array} hosts\n   */\n  nodesToHost (nodes, protocol) {\n    const ids = Object.keys(nodes)\n    const hosts = []\n\n    for (let i = 0, len = ids.length; i < len; i++) {\n      const node = nodes[ids[i]]\n      // If there is no protocol in\n      // the `publish_address` new URL will throw\n      // the publish_address can have two forms:\n      //   - ip:port\n      //   - hostname/ip:port\n      // if we encounter the second case, we should\n      // use the hostname instead of the ip\n      let address = node.http.publish_address\n      const parts = address.split('/')\n      // the url is in the form of hostname/ip:port\n      if (parts.length > 1) {\n        const hostname = parts[0]\n        const port = parts[1].match(/((?::))(?:[0-9]+)$/g)[0].slice(1)\n        address = `${hostname}:${port}`\n      }\n\n      address = address.slice(0, 4) === 'http'\n        /* istanbul ignore next */\n        ? address\n        : `${protocol}//${address}`\n      const roles = node.roles.reduce((acc, role) => {\n        acc[role] = true\n        return acc\n      }, {})\n\n      hosts.push({\n        url: new URL(address),\n        id: ids[i],\n        roles: Object.assign({\n          [Connection.roles.MASTER]: false,\n          [Connection.roles.DATA]: false,\n          [Connection.roles.INGEST]: false,\n          [Connection.roles.ML]: false\n        }, roles)\n      })\n    }\n\n    return hosts\n  }\n\n  /**\n   * Transforms an url string to a host object\n   *\n   * @param {string} url\n   * @returns {object} host\n   */\n  urlToHost (url) {\n    return {\n      url: new URL(url)\n    }\n  }\n}\n\nmodule.exports = BaseConnectionPool\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst BaseConnectionPool = require('./BaseConnectionPool')\n\nclass CloudConnectionPool extends BaseConnectionPool {\n  constructor (opts) {\n    super(opts)\n    this.cloudConnection = null\n  }\n\n  /**\n   * Returns the only cloud connection.\n   *\n   * @returns {object} connection\n   */\n  getConnection () {\n    return this.cloudConnection\n  }\n\n  /**\n   * Empties the connection pool.\n   *\n   * @returns {ConnectionPool}\n   */\n  empty (callback) {\n    super.empty(() => {\n      this.cloudConnection = null\n      callback()\n    })\n  }\n\n  /**\n   * Update the ConnectionPool with new connections.\n   *\n   * @param {array} array of connections\n   * @returns {ConnectionPool}\n   */\n  update (connections) {\n    super.update(connections)\n    this.cloudConnection = this.connections[0]\n    return this\n  }\n}\n\nmodule.exports = CloudConnectionPool\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst BaseConnectionPool = require('./BaseConnectionPool')\nconst assert = require('assert')\nconst debug = require('debug')('elasticsearch')\nconst Connection = require('../Connection')\nconst noop = () => {}\n\nclass ConnectionPool extends BaseConnectionPool {\n  constructor (opts) {\n    super(opts)\n\n    this.dead = []\n    // the resurrect timeout is 60s\n    this.resurrectTimeout = 1000 * 60\n    // number of consecutive failures after which\n    // the timeout doesn't increase\n    this.resurrectTimeoutCutoff = 5\n    this.pingTimeout = opts.pingTimeout\n    this._sniffEnabled = opts.sniffEnabled || false\n\n    const resurrectStrategy = opts.resurrectStrategy || 'ping'\n    this.resurrectStrategy = ConnectionPool.resurrectStrategies[resurrectStrategy]\n    assert(\n      this.resurrectStrategy != null,\n      `Invalid resurrection strategy: '${resurrectStrategy}'`\n    )\n  }\n\n  /**\n   * Marks a connection as 'alive'.\n   * If needed removes the connection from the dead list\n   * and then resets the `deadCount`.\n   *\n   * @param {object} connection\n   */\n  markAlive (connection) {\n    const { id } = connection\n    debug(`Marking as 'alive' connection '${id}'`)\n    const index = this.dead.indexOf(id)\n    if (index > -1) this.dead.splice(index, 1)\n    connection.status = Connection.statuses.ALIVE\n    connection.deadCount = 0\n    connection.resurrectTimeout = 0\n    return this\n  }\n\n  /**\n   * Marks a connection as 'dead'.\n   * If needed adds the connection to the dead list\n   * and then increments the `deadCount`.\n   *\n   * @param {object} connection\n   */\n  markDead (connection) {\n    const { id } = connection\n    debug(`Marking as 'dead' connection '${id}'`)\n    if (this.dead.indexOf(id) === -1) {\n      // It might happen that `markDead` is called jsut after\n      // a pool update, and in such case we will add to the dead\n      // list a node that no longer exist. The following check verify\n      // that the connection is still part of the pool before\n      // marking it as dead.\n      for (let i = 0; i < this.size; i++) {\n        if (this.connections[i].id === id) {\n          this.dead.push(id)\n          break\n        }\n      }\n    }\n    connection.status = Connection.statuses.DEAD\n    connection.deadCount++\n    // resurrectTimeout formula:\n    // `resurrectTimeout * 2 ** min(deadCount - 1, resurrectTimeoutCutoff)`\n    connection.resurrectTimeout = Date.now() + this.resurrectTimeout * Math.pow(\n      2, Math.min(connection.deadCount - 1, this.resurrectTimeoutCutoff)\n    )\n\n    // sort the dead list in ascending order\n    // based on the resurrectTimeout\n    this.dead.sort((a, b) => {\n      const conn1 = this.connections.find(c => c.id === a)\n      const conn2 = this.connections.find(c => c.id === b)\n      return conn1.resurrectTimeout - conn2.resurrectTimeout\n    })\n\n    return this\n  }\n\n  /**\n   * If enabled, tries to resurrect a connection with the given\n   * resurrect strategy ('ping', 'optimistic', 'none').\n   *\n   * @param {object} { now, requestId }\n   * @param {function} callback (isAlive, connection)\n   */\n  resurrect (opts, callback = noop) {\n    if (this.resurrectStrategy === 0 || this.dead.length === 0) {\n      debug('Nothing to resurrect')\n      callback(null, null)\n      return\n    }\n\n    // the dead list is sorted in ascending order based on the timeout\n    // so the first element will always be the one with the smaller timeout\n    const connection = this.connections.find(c => c.id === this.dead[0])\n    if ((opts.now || Date.now()) < connection.resurrectTimeout) {\n      debug('Nothing to resurrect')\n      callback(null, null)\n      return\n    }\n\n    const { id } = connection\n\n    // ping strategy\n    if (this.resurrectStrategy === 1) {\n      connection.request({\n        method: 'HEAD',\n        path: '/',\n        timeout: this.pingTimeout\n      }, (err, response) => {\n        let isAlive = true\n        const statusCode = response !== null ? response.statusCode : 0\n        if (err != null ||\n           (statusCode === 502 || statusCode === 503 || statusCode === 504)) {\n          debug(`Resurrect: connection '${id}' is still dead`)\n          this.markDead(connection)\n          isAlive = false\n        } else {\n          debug(`Resurrect: connection '${id}' is now alive`)\n          this.markAlive(connection)\n        }\n        this.emit('resurrect', null, {\n          strategy: 'ping',\n          name: opts.name,\n          request: { id: opts.requestId },\n          isAlive,\n          connection\n        })\n        callback(isAlive, connection)\n      })\n    // optimistic strategy\n    } else {\n      debug(`Resurrect: optimistic resurrection for connection '${id}'`)\n      this.dead.splice(this.dead.indexOf(id), 1)\n      connection.status = Connection.statuses.ALIVE\n      this.emit('resurrect', null, {\n        strategy: 'optimistic',\n        name: opts.name,\n        request: { id: opts.requestId },\n        isAlive: true,\n        connection\n      })\n      callback(true, connection) // eslint-disable-line\n    }\n  }\n\n  /**\n   * Returns an alive connection if present,\n   * otherwise returns a dead connection.\n   * By default it filters the `master` only nodes.\n   * It uses the selector to choose which\n   * connection return.\n   *\n   * @param {object} options (filter and selector)\n   * @returns {object|null} connection\n   */\n  getConnection (opts = {}) {\n    const filter = opts.filter || (() => true)\n    const selector = opts.selector || (c => c[0])\n\n    this.resurrect({\n      now: opts.now,\n      requestId: opts.requestId,\n      name: opts.name\n    })\n\n    const noAliveConnections = this.size === this.dead.length\n\n    // TODO: can we cache this?\n    const connections = []\n    for (let i = 0; i < this.size; i++) {\n      const connection = this.connections[i]\n      if (noAliveConnections || connection.status === Connection.statuses.ALIVE) {\n        if (filter(connection) === true) {\n          connections.push(connection)\n        }\n      }\n    }\n\n    if (connections.length === 0) return null\n\n    return selector(connections)\n  }\n\n  /**\n   * Empties the connection pool.\n   *\n   * @returns {ConnectionPool}\n   */\n  empty (callback) {\n    super.empty(() => {\n      this.dead = []\n      callback()\n    })\n  }\n\n  /**\n   * Update the ConnectionPool with new connections.\n   *\n   * @param {array} array of connections\n   * @returns {ConnectionPool}\n   */\n  update (connections) {\n    super.update(connections)\n    this.dead = []\n    return this\n  }\n}\n\nConnectionPool.resurrectStrategies = {\n  none: 0,\n  ping: 1,\n  optimistic: 2\n}\n\nmodule.exports = ConnectionPool\n","/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict'\n\nconst BaseConnectionPool = require('./BaseConnectionPool')\nconst ConnectionPool = require('./ConnectionPool')\nconst CloudConnectionPool = require('./CloudConnectionPool')\n\nmodule.exports = {\n  BaseConnectionPool,\n  ConnectionPool,\n  CloudConnectionPool\n}\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildFullPath = require('../core/buildFullPath');\nvar buildURL = require('./../helpers/buildURL');\nvar http = require('http');\nvar https = require('https');\nvar httpFollow = require('follow-redirects').http;\nvar httpsFollow = require('follow-redirects').https;\nvar url = require('url');\nvar zlib = require('zlib');\nvar VERSION = require('./../env/data').version;\nvar createError = require('../core/createError');\nvar enhanceError = require('../core/enhanceError');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\nvar isHttps = /https:?/;\n\n/**\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} proxy\n * @param {string} location\n */\nfunction setProxy(options, proxy, location) {\n  options.hostname = proxy.host;\n  options.host = proxy.host;\n  options.port = proxy.port;\n  options.path = location;\n\n  // Basic proxy authorization\n  if (proxy.auth) {\n    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');\n    options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n  }\n\n  // If a proxy is used, any redirects must also pass through the proxy\n  options.beforeRedirect = function beforeRedirect(redirection) {\n    redirection.headers.host = redirection.host;\n    setProxy(redirection, proxy, redirection.href);\n  };\n}\n\n/*eslint consistent-return:0*/\nmodule.exports = function httpAdapter(config) {\n  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n    var resolve = function resolve(value) {\n      done();\n      resolvePromise(value);\n    };\n    var reject = function reject(value) {\n      done();\n      rejectPromise(value);\n    };\n    var data = config.data;\n    var headers = config.headers;\n    var headerNames = {};\n\n    Object.keys(headers).forEach(function storeLowerName(name) {\n      headerNames[name.toLowerCase()] = name;\n    });\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    if ('user-agent' in headerNames) {\n      // User-Agent is specified; handle case where no UA header is desired\n      if (!headers[headerNames['user-agent']]) {\n        delete headers[headerNames['user-agent']];\n      }\n      // Otherwise, use specified value\n    } else {\n      // Only set header if it hasn't been set in config\n      headers['User-Agent'] = 'axios/' + VERSION;\n    }\n\n    if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(createError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          config\n        ));\n      }\n\n      // Add Content-Length header if data exists\n      if (!headerNames['content-length']) {\n        headers['Content-Length'] = data.length;\n      }\n    }\n\n    // HTTP basic authentication\n    var auth = undefined;\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    // Parse url\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    var parsed = url.parse(fullPath);\n    var protocol = parsed.protocol || 'http:';\n\n    if (!auth && parsed.auth) {\n      var urlAuth = parsed.auth.split(':');\n      var urlUsername = urlAuth[0] || '';\n      var urlPassword = urlAuth[1] || '';\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    if (auth && headerNames.authorization) {\n      delete headers[headerNames.authorization];\n    }\n\n    var isHttpsRequest = isHttps.test(protocol);\n    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n\n    var options = {\n      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n      method: config.method.toUpperCase(),\n      headers: headers,\n      agent: agent,\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth: auth\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n    }\n\n    var proxy = config.proxy;\n    if (!proxy && proxy !== false) {\n      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n      if (proxyUrl) {\n        var parsedProxyUrl = url.parse(proxyUrl);\n        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n        var shouldProxy = true;\n\n        if (noProxyEnv) {\n          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n            return s.trim();\n          });\n\n          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n            if (!proxyElement) {\n              return false;\n            }\n            if (proxyElement === '*') {\n              return true;\n            }\n            if (proxyElement[0] === '.' &&\n                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n              return true;\n            }\n\n            return parsed.hostname === proxyElement;\n          });\n        }\n\n        if (shouldProxy) {\n          proxy = {\n            host: parsedProxyUrl.hostname,\n            port: parsedProxyUrl.port,\n            protocol: parsedProxyUrl.protocol\n          };\n\n          if (parsedProxyUrl.auth) {\n            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n            proxy.auth = {\n              username: proxyUrlAuth[0],\n              password: proxyUrlAuth[1]\n            };\n          }\n        }\n      }\n    }\n\n    if (proxy) {\n      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    var transport;\n    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsProxy ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      transport = isHttpsProxy ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    var req = transport.request(options, function handleResponse(res) {\n      if (req.aborted) return;\n\n      // uncompress the response body transparently if required\n      var stream = res;\n\n      // return the last request in case of redirects\n      var lastRequest = res.req || req;\n\n\n      // if no content, is HEAD request or decompress disabled we should not decompress\n      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n        switch (res.headers['content-encoding']) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'compress':\n        case 'deflate':\n        // add the unzipper to the body stream processing pipeline\n          stream = stream.pipe(zlib.createUnzip());\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        }\n      }\n\n      var response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: res.headers,\n        config: config,\n        request: lastRequest\n      };\n\n      if (config.responseType === 'stream') {\n        response.data = stream;\n        settle(resolve, reject, response);\n      } else {\n        var responseBuffer = [];\n        var totalResponseBytes = 0;\n        stream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            stream.destroy();\n            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              config, null, lastRequest));\n          }\n        });\n\n        stream.on('error', function handleStreamError(err) {\n          if (req.aborted) return;\n          reject(enhanceError(err, config, null, lastRequest));\n        });\n\n        stream.on('end', function handleStreamEnd() {\n          var responseData = Buffer.concat(responseBuffer);\n          if (config.responseType !== 'arraybuffer') {\n            responseData = responseData.toString(config.responseEncoding);\n            if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n              responseData = utils.stripBOM(responseData);\n            }\n          }\n\n          response.data = responseData;\n          settle(resolve, reject, response);\n        });\n      }\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;\n      reject(enhanceError(err, config, null, req));\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      var timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(createError(\n          'error trying to parse `config.timeout` to int',\n          config,\n          'ERR_PARSE_TIMEOUT',\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devoring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        req.abort();\n        var transitional = config.transitional || defaults.transitional;\n        reject(createError(\n          'timeout of ' + timeout + 'ms exceeded',\n          config,\n          transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n          req\n        ));\n      });\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (req.aborted) return;\n\n        req.abort();\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      data.on('error', function handleStreamError(err) {\n        reject(enhanceError(err, config, null, req));\n      }).pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('./../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\nvar enhanceError = require('./core/enhanceError');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","module.exports = {\n  \"version\": \"0.24.0\"\n};","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar VERSION = require('../env/data').version;\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n","/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n","var debug;\n\nmodule.exports = function () {\n  if (!debug) {\n    try {\n      /* eslint global-require: off */\n      debug = require(\"debug\")(\"follow-redirects\");\n    }\n    catch (error) { /* */ }\n    if (typeof debug !== \"function\") {\n      debug = function () { /* */ };\n    }\n  }\n  debug.apply(null, arguments);\n};\n","var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Create handlers that pass events from native requests\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\n\n// Error types with codes\nvar RedirectionError = createErrorType(\n  \"ERR_FR_REDIRECTION_FAILURE\",\n  \"Redirected request failed\"\n);\nvar TooManyRedirectsError = createErrorType(\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\n  \"Maximum number of redirects exceeded\"\n);\nvar MaxBodyLengthExceededError = createErrorType(\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\n  \"Request body larger than maxBodyLength limit\"\n);\nvar WriteAfterEndError = createErrorType(\n  \"ERR_STREAM_WRITE_AFTER_END\",\n  \"write after end\"\n);\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  abortRequest(this._currentRequest);\n  this.emit(\"abort\");\n};\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!(typeof data === \"string\" || typeof data === \"object\" && (\"length\" in data))) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (typeof data === \"function\") {\n    callback = data;\n    data = encoding = null;\n  }\n  else if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  }\n  else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n\n  // Destroys the socket on timeout\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  }\n\n  // Sets up a timer to trigger a timeout event\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  }\n\n  // Stops a timeout from triggering\n  function clearTimer() {\n    // Clear the timeout\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    }\n\n    // Clean up all attached listeners\n    self.removeListener(\"abort\", clearTimer);\n    self.removeListener(\"error\", clearTimer);\n    self.removeListener(\"response\", clearTimer);\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  }\n\n  // Attach callback if passed\n  if (callback) {\n    this.on(\"timeout\", callback);\n  }\n\n  // Start the timer if or when the socket is opened\n  if (this.socket) {\n    startTimer(this.socket);\n  }\n  else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  // Clean up on events\n  this.on(\"socket\", destroyOnTimeout);\n  this.on(\"abort\", clearTimer);\n  this.on(\"error\", clearTimer);\n  this.on(\"response\", clearTimer);\n\n  return this;\n};\n\n// Proxy all other public ClientRequest methods\n[\n  \"flushHeaders\", \"getHeader\",\n  \"setNoDelay\", \"setSocketKeepAlive\",\n].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () { return this._currentRequest[property]; },\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    }\n    else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.substr(0, protocol.length - 1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  this._currentUrl = url.format(this._options);\n\n  // Set up event handlers\n  request._redirectable = this;\n  for (var e = 0; e < events.length; e++) {\n    request.on(events[e], eventHandlers[events[e]]);\n  }\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end.\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    }());\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode,\n    });\n  }\n\n  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n  var location = response.headers.location;\n  if (location && this._options.followRedirects !== false &&\n      statusCode >= 300 && statusCode < 400) {\n    // Abort the current request\n    abortRequest(this._currentRequest);\n    // Discard the remainder of the response to avoid waiting for data\n    response.destroy();\n\n    // RFC7231§6.4: A client SHOULD detect and intervene\n    // in cyclical redirections (i.e., \"infinite\" redirection loops).\n    if (++this._redirectCount > this._options.maxRedirects) {\n      this.emit(\"error\", new TooManyRedirectsError());\n      return;\n    }\n\n    // RFC7231§6.4: Automatic redirection needs to done with\n    // care for methods not known to be safe, […]\n    // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change\n    // the request method from POST to GET for the subsequent request.\n    if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n        // RFC7231§6.4.4: The 303 (See Other) status code indicates that\n        // the server is redirecting the user agent to a different resource […]\n        // A user agent can perform a retrieval request targeting that URI\n        // (a GET or HEAD request if using HTTP) […]\n        (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n      this._options.method = \"GET\";\n      // Drop a possible entity and headers related to it\n      this._requestBodyBuffers = [];\n      removeMatchingHeaders(/^content-/i, this._options.headers);\n    }\n\n    // Drop the Host header, as the redirect might lead to a different host\n    var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);\n\n    // If the redirect is relative, carry over the host of the last request\n    var currentUrlParts = url.parse(this._currentUrl);\n    var currentHost = currentHostHeader || currentUrlParts.host;\n    var currentUrl = /^\\w+:/.test(location) ? this._currentUrl :\n      url.format(Object.assign(currentUrlParts, { host: currentHost }));\n\n    // Determine the URL of the redirection\n    var redirectUrl;\n    try {\n      redirectUrl = url.resolve(currentUrl, location);\n    }\n    catch (cause) {\n      this.emit(\"error\", new RedirectionError(cause));\n      return;\n    }\n\n    // Create the redirected request\n    debug(\"redirecting to\", redirectUrl);\n    this._isRedirect = true;\n    var redirectUrlParts = url.parse(redirectUrl);\n    Object.assign(this._options, redirectUrlParts);\n\n    // Drop the Authorization header if redirecting to another domain\n    if (!(redirectUrlParts.host === currentHost || isSubdomainOf(redirectUrlParts.host, currentHost))) {\n      removeMatchingHeaders(/^authorization$/i, this._options.headers);\n    }\n\n    // Evaluate the beforeRedirect callback\n    if (typeof this._options.beforeRedirect === \"function\") {\n      var responseDetails = { headers: response.headers };\n      try {\n        this._options.beforeRedirect.call(null, this._options, responseDetails);\n      }\n      catch (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n      this._sanitizeOptions(this._options);\n    }\n\n    // Perform the redirected request\n    try {\n      this._performRequest();\n    }\n    catch (cause) {\n      this.emit(\"error\", new RedirectionError(cause));\n    }\n  }\n  else {\n    // The response is not a redirect; return it as-is\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n  }\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024,\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    function request(input, options, callback) {\n      // Parse parameters\n      if (typeof input === \"string\") {\n        var urlStr = input;\n        try {\n          input = urlToOptions(new URL(urlStr));\n        }\n        catch (err) {\n          /* istanbul ignore next */\n          input = url.parse(urlStr);\n        }\n      }\n      else if (URL && (input instanceof URL)) {\n        input = urlToOptions(input);\n      }\n      else {\n        callback = options;\n        options = input;\n        input = { protocol: protocol };\n      }\n      if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }\n\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n\n    // Expose the properties on the wrapped protocol\n    Object.defineProperties(wrappedProtocol, {\n      request: { value: request, configurable: true, enumerable: true, writable: true },\n      get: { value: get, configurable: true, enumerable: true, writable: true },\n    });\n  });\n  return exports;\n}\n\n/* istanbul ignore next */\nfunction noop() { /* empty */ }\n\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n      /* istanbul ignore next */\n      urlObject.hostname.slice(1, -1) :\n      urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href,\n  };\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header].toString().trim();\n      delete headers[header];\n    }\n  }\n  return lastValue;\n}\n\nfunction createErrorType(code, defaultMessage) {\n  function CustomError(cause) {\n    Error.captureStackTrace(this, this.constructor);\n    if (!cause) {\n      this.message = defaultMessage;\n    }\n    else {\n      this.message = defaultMessage + \": \" + cause.message;\n      this.cause = cause;\n    }\n  }\n  CustomError.prototype = new Error();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  CustomError.prototype.code = code;\n  return CustomError;\n}\n\nfunction abortRequest(request) {\n  for (var e = 0; e < events.length; e++) {\n    request.removeListener(events[e], eventHandlers[events[e]]);\n  }\n  request.on(\"error\", noop);\n  request.abort();\n}\n\nfunction isSubdomainOf(subdomain, domain) {\n  const dot = subdomain.length - domain.length - 1;\n  return dot > 0 && subdomain[dot] === \".\" && subdomain.endsWith(domain);\n}\n\n// Exports\nmodule.exports = wrap({ http: http, https: https });\nmodule.exports.wrap = wrap;\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict'\n\nconst https = require('https')\nconst http = require('http')\nconst { URL } = require('url')\n\nclass HttpProxyAgent extends http.Agent {\n  constructor (options) {\n    const { proxy, ...opts } = options\n    super(opts)\n    this.proxy = typeof proxy === 'string'\n      ? new URL(proxy)\n      : proxy\n  }\n\n  createConnection (options, callback) {\n    const requestOptions = {\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: { connection: this.keepAlive ? 'keep-alive' : 'close', host: `${options.host}:${options.port}` },\n      agent: false\n    }\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${this.proxy.username || ''}:${this.proxy.password || ''}`).toString('base64')\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions)\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners()\n      socket.removeAllListeners()\n      if (response.statusCode === 200) {\n        callback(null, socket)\n      } else {\n        callback(new Error(`Bad response: ${response.statusCode}`), null)\n      }\n    })\n\n    request.once('error', err => {\n      request.removeAllListeners()\n      callback(err, null)\n    })\n\n    request.end()\n  }\n}\n\nclass HttpsProxyAgent extends https.Agent {\n  constructor (options) {\n    const { proxy, ...opts } = options\n    super(opts)\n    this.proxy = typeof proxy === 'string'\n      ? new URL(proxy)\n      : proxy\n  }\n\n  createConnection (options, callback) {\n    const requestOptions = {\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: { connection: this.keepAlive ? 'keep-alive' : 'close', host: `${options.host}:${options.port}` },\n      agent: false\n    }\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${this.proxy.username || ''}:${this.proxy.password || ''}`).toString('base64')\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions)\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners()\n      socket.removeAllListeners()\n      if (response.statusCode === 200) {\n        const secureSocket = super.createConnection({ ...options, socket })\n        callback(null, secureSocket)\n      } else {\n        callback(new Error(`Bad response: ${response.statusCode}`), null)\n      }\n    })\n\n    request.once('error', err => {\n      request.removeAllListeners()\n      callback(err, null)\n    })\n\n    request.end()\n  }\n}\n\nmodule.exports = {\n  HttpProxyAgent,\n  HttpsProxyAgent\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","'use strict'\n\nconst hasBuffer = typeof Buffer !== 'undefined'\nconst suspectProtoRx = /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*:/\nconst suspectConstructorRx = /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/\n\nfunction parse (text, reviver, options) {\n  // Normalize arguments\n  if (options == null) {\n    if (reviver !== null && typeof reviver === 'object') {\n      options = reviver\n      reviver = undefined\n    } else {\n      options = {}\n    }\n  }\n\n  const protoAction = options.protoAction || 'error'\n  const constructorAction = options.constructorAction || 'error'\n\n  if (hasBuffer && Buffer.isBuffer(text)) {\n    text = text.toString()\n  }\n\n  // BOM checker\n  if (text && text.charCodeAt(0) === 0xFEFF) {\n    text = text.slice(1)\n  }\n\n  // Parse normally, allowing exceptions\n  const obj = JSON.parse(text, reviver)\n\n  // options: 'error' (default) / 'remove' / 'ignore'\n  if (protoAction === 'ignore' && constructorAction === 'ignore') {\n    return obj\n  }\n\n  // Ignore null and non-objects\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n\n  if (protoAction !== 'ignore' && constructorAction !== 'ignore') {\n    if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {\n      return obj\n    }\n  } else if (protoAction !== 'ignore' && constructorAction === 'ignore') {\n    if (suspectProtoRx.test(text) === false) {\n      return obj\n    }\n  } else {\n    if (suspectConstructorRx.test(text) === false) {\n      return obj\n    }\n  }\n\n  // Scan result for proto keys\n  scan(obj, { protoAction, constructorAction })\n\n  return obj\n}\n\nfunction scan (obj, { protoAction = 'error', constructorAction = 'error' } = {}) {\n  let next = [obj]\n\n  while (next.length) {\n    const nodes = next\n    next = []\n\n    for (const node of nodes) {\n      if (protoAction !== 'ignore' && Object.prototype.hasOwnProperty.call(node, '__proto__')) { // Avoid calling node.hasOwnProperty directly\n        if (protoAction === 'error') {\n          throw new SyntaxError('Object contains forbidden prototype property')\n        }\n\n        delete node.__proto__ // eslint-disable-line no-proto\n      }\n\n      if (constructorAction !== 'ignore' &&\n          Object.prototype.hasOwnProperty.call(node, 'constructor') &&\n          Object.prototype.hasOwnProperty.call(node.constructor, 'prototype')) { // Avoid calling node.hasOwnProperty directly\n        if (constructorAction === 'error') {\n          throw new SyntaxError('Object contains forbidden prototype property')\n        }\n\n        delete node.constructor\n      }\n\n      for (const key in node) {\n        const value = node[key]\n        if (value && typeof value === 'object') {\n          next.push(node[key])\n        }\n      }\n    }\n  }\n}\n\nfunction safeParse (text, reviver) {\n  try {\n    return parse(text, reviver)\n  } catch (ignoreError) {\n    return null\n  }\n}\n\nmodule.exports = {\n  parse,\n  scan,\n  safeParse\n}\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","module.exports = require(\"assert\");","module.exports = require(\"buffer\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"querystring\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"tty\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(3109);\n"],"mappings":";;;;;;;A;;A;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AClvTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A;;;;;;ACzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACzxhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACxlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACrvolZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjnaplHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACvrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACvtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACxtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjvrz9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACrvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACvtjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACttFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACrzutbtvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AChpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AClfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACzvjwhrrrPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;AC7BA;;A;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AC1WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACtHA;AACA;AACA;AACA;AACA;;;A;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACtlGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACrrIA;AACA;AACA;;A;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;ACjjjtQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;ACdvjpjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;ACtvQA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;;;ACAA;;A;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;ACDA;AACA;AACA;AACA;;;;A","sourceRoot":""}